<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>一个码农的Mac配置</title>
    <url>/2013/04/10/build-your-mac-os/</url>
    <content><![CDATA[<h4 id="我常用的一些Mac工具"><a href="#我常用的一些Mac工具" class="headerlink" title="我常用的一些Mac工具"></a>我常用的一些Mac工具</h4><ul>
<li><a href="http://www.iterm2.com/" target="_blank" rel="noopener">iTerm2</a> 一个增强的命令终端</li>
<li><a href="http://www.sourcetreeapp.com/" target="_blank" rel="noopener">SourceTree</a> git代码控制工具</li>
<li><a href="https://www.wunderlist.com/" target="_blank" rel="noopener">WunderList</a> 一个出色的Todo工具，提供云同步，我把它当做我的任务列表</li>
<li><a href="https://github.com/textmate/textmate/tags" target="_blank" rel="noopener">TextMate2</a> 号称”The Missing Editor for Mac OS X”</li>
<li><a href="http://www.sublimetext.com/2" target="_blank" rel="noopener">SublimeText2</a> 另一个特别出色的Editor</li>
<li><a href="http://www.alfredapp.com/" target="_blank" rel="noopener">Alfred</a> Option+Space,唤出，提高你打开软件的效率，购买Powerpack还可以使用很多强大的拓展</li>
<li><a href="http://www.i-funbox.com/" target="_blank" rel="noopener">iFunBox</a> 管理你的苹果设备的文件，可以不通过iTunes直接把文件放到程序的Documents下面</li>
<li><a href="https://jianguoyun.com/" target="_blank" rel="noopener">坚果云</a> 国内一个特别出色的网盘，可以右键添加要同步的文件</li>
<li><a href="http://evernote.com/" target="_blank" rel="noopener">Evernote</a> 这个大家都懂的</li>
<li><a href="http://www.trankynam.com/xtrafinder/" target="_blank" rel="noopener">XtraFinder</a> 为你的Finder增加Tab，剪切等功能</li>
<li><a href="http://shortcatapp.com/" target="_blank" rel="noopener">shortcat</a>键盘快捷键，写啥点啥,怒赞</li>
<li><a href="http://chameleon.alessandroboschini.com/" target="_blank" rel="noopener">Chameleon</a> 打开第三方SSD的trim</li>
<li><a href="https://apps.apple.com/cn/app/agenda/id1287445660?mt=12" target="_blank" rel="noopener">Agenda</a></li>
<li><a href="https://www.mowglii.com/itsycal/" target="_blank" rel="noopener">itsycal</a> 不错的菜单栏日历</li>
<li><a href="https://www.sublimemerge.com/" target="_blank" rel="noopener">Sublime Merge</a> Sublime Text出品的Git客户端</li>
<li><a href="https://netbeans.org/community/releases/81/index.html" target="_blank" rel="noopener">Netbeans 8</a> 使用PlantUML插件用它来画UML</li>
<li><a href="https://apps.apple.com/cn/app/ithoughtsx-mindmap/id720669838?mt=12" target="_blank" rel="noopener">iThoughtsX(Paid)</a> Mindmap工具</li>
<li><a href="https://apps.apple.com/cn/app/forklift-file-manager-and-ftp-sftp-webdav-amazon-s3-client/id412448059?mt=12" target="_blank" rel="noopener">ForkLift2</a> 目前AppStore版本免费，强大功能齐全的FTP工具</li>
</ul>
<h4 id="shortcat快捷键"><a href="#shortcat快捷键" class="headerlink" title="shortcat快捷键"></a>shortcat快捷键</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">cmd+shift+space唤醒</span><br><span class="line">输入关键词后，如果匹配了多个，使用control+字母去点击相应的匹配</span><br></pre></td></tr></table></figure>
<h4 id="安装HomeBrew"><a href="#安装HomeBrew" class="headerlink" title="安装HomeBrew"></a>安装HomeBrew</h4><p>Homebrew是一个管理Mac拓展的工具，他可以很方便的安装你所需要的软件，以及软件的一些依赖包</p>
<p>比如安装mysql，你只需要</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">brew install mysql</span><br></pre></td></tr></table></figure>
<p>Homebrew 安装特别简单，只需要键入</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">ruby -e <span class="string">"$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)"</span></span><br></pre></td></tr></table></figure>
<p>相关的文档可以到官方去查看<a href="http://mxcl.github.io/homebrew/" target="_blank" rel="noopener">http://mxcl.github.io/homebrew/</a></p>
<h4 id="安装oh-my-Zsh"><a href="#安装oh-my-Zsh" class="headerlink" title="安装oh-my-Zsh"></a>安装oh-my-Zsh</h4><p>Zsh是Mac上面的一个命令行增强工具，他提供了关键字高亮，命令补全，以及一些命令的拓展，</p>
<p>安装步骤<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">curl -L <span class="symbol">https:</span>/<span class="regexp">/github.com/robbyrussell</span><span class="regexp">/oh-my-zsh/raw</span><span class="regexp">/master/tools</span><span class="regexp">/install.sh | sh</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">#备份你的.zshrc文件</span></span><br><span class="line"><span class="regexp">cp ~/</span>.zshrc ~<span class="regexp">/.zshrc.orig</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">#创建zsh配置</span></span><br><span class="line"><span class="regexp">cp ~/</span>.oh-my-zsh/templates/zshrc.zsh-template ~<span class="regexp">/.zshrc</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">#设置zsh为你的默认shell</span></span><br><span class="line"><span class="regexp">chsh -s /bin</span><span class="regexp">/zsh</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">#重启终端就会生效</span></span><br></pre></td></tr></table></figure></p>
<p>这里还有一些主题<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh/wiki/themes</a></p>
<p>如果你要修改zsh的默认主题<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">vi ~<span class="regexp">/.zshrc</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">修改ZSH_THEME为你喜欢的主题名即可</span></span><br></pre></td></tr></table></figure></p>
<p>如果不想继续使用，可以使用以下命令卸载<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">uninstall_oh_my_zsh</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
  </entry>
  <entry>
    <title>Cocoapods 使用</title>
    <url>/2013/04/10/use-cocoapods/</url>
    <content><![CDATA[<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">gem install cocoapods</span><br></pre></td></tr></table></figure>
<p>cd到你的项目的根目录，就是跟project文件同级,建立Podfile文件<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">touch Podfile</span><br></pre></td></tr></table></figure></p>
<p>加入平台版本，（5.1可以省略，但是最好在podfile中加入，因为一些ARC相关的类库不加的话，会提示错误）<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">platform <span class="symbol">:ios</span>,<span class="string">'9.0'</span></span><br></pre></td></tr></table></figure></p>
<p>搜索第三方的oc库</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">pod search fmdb</span><br><span class="line"></span><br><span class="line">-&gt; FMDB (<span class="number">2.0</span>)</span><br><span class="line">   A Cocoa / Objective-C wrapper around SQLite.</span><br><span class="line">   - <span class="symbol">Homepage:</span> <span class="symbol">https:</span>/<span class="regexp">/github.com/ccgus</span><span class="regexp">/fmdb</span></span><br><span class="line"><span class="regexp">   - Source:   https:/</span><span class="regexp">/github.com/ccgus</span><span class="regexp">/fmdb.git</span></span><br><span class="line"><span class="regexp">   - Versions: 2.0, 1.5.1, 1.5 [master repo]</span></span><br></pre></td></tr></table></figure>
<p>通过搜索，我们已经找到了该类库的版本的名字，只需要将这些内容加入到podfile文件中即可</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">platform <span class="symbol">:ios</span>, <span class="string">'5.1'</span></span><br><span class="line">Pod <span class="string">'FMDB'</span>,<span class="string">'2.0'</span></span><br></pre></td></tr></table></figure>
<p>然后执行下面的命令，将这些类库加到到本地</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure>
<h3 id="修复Cocoapods，重置repo"><a href="#修复Cocoapods，重置repo" class="headerlink" title="修复Cocoapods，重置repo"></a>修复Cocoapods，重置repo</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">pod repo remove master</span><br><span class="line">pod repo add master <span class="symbol">https:</span>/<span class="regexp">/github.com/</span>CocoaPods/Specs.git</span><br><span class="line">pod repo update</span><br></pre></td></tr></table></figure>
<h3 id="减少更新安装的时间，只安装或更新必要的库"><a href="#减少更新安装的时间，只安装或更新必要的库" class="headerlink" title="减少更新安装的时间，只安装或更新必要的库"></a>减少更新安装的时间，只安装或更新必要的库</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">pod install --verbose --no-repo-update</span><br><span class="line">pod update --verbose --no-repo-update</span><br></pre></td></tr></table></figure>
<p>之后将会生成一个workspace文件，以后我们打开项目的时候，就打开workspace文件即可，项目和其所需要的类库都以sub project的方式加到了这个workspace下面</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
  </entry>
  <entry>
    <title>生成 github SSH keys</title>
    <url>/2013/04/10/generate-github-ssh-keys/</url>
    <content><![CDATA[<p>本文主要来自github官方，Generating SSH Keys</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">cd ~<span class="regexp">/.ssh</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ssh-keygen -t rsa -C "your_email@example.com"</span></span><br></pre></td></tr></table></figure>
<p>下面的步骤可以只敲回车进行确认即可<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Creates a new ssh key using the provided email</span><br><span class="line"></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line"></span><br><span class="line"><span class="comment">#这里直接回车就会生成一个默认名为id_rsa</span></span><br><span class="line">Enter file <span class="keyword">in</span> which to save the key (<span class="regexp">/Users/you</span><span class="regexp">/.ssh/id</span>_rsa): [Press enter]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#这里需要你输入一个你加密的key（一定要记住）</span></span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): [Type a passphrase]</span><br><span class="line">Enter same passphrase <span class="symbol">again:</span> [Type passphrase again]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /Users/welsonla/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /Users/welsonla/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint <span class="symbol">is:</span></span><br><span class="line"><span class="number">30</span><span class="symbol">:e8</span><span class="symbol">:aa</span><span class="symbol">:</span>08<span class="symbol">:ee</span><span class="symbol">:bc</span><span class="symbol">:</span><span class="number">76</span><span class="symbol">:</span><span class="number">88</span><span class="symbol">:</span><span class="number">2</span><span class="symbol">c:</span><span class="number">3</span><span class="symbol">f:</span><span class="number">83</span><span class="symbol">:</span><span class="number">39</span><span class="symbol">:b0</span><span class="symbol">:</span><span class="number">6</span><span class="symbol">e:</span><span class="number">95</span><span class="symbol">:cc</span> wyc.jar@gmail.com</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+--[ RSA 2048]----+</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">|     .           |</span></span><br><span class="line"><span class="string">|    . o          |</span></span><br><span class="line"><span class="string">|   .   o         |</span></span><br><span class="line"><span class="string">|  o o   S        |</span></span><br><span class="line"><span class="string">|.  E             |</span></span><br><span class="line"><span class="string">|=++              |</span></span><br><span class="line"><span class="string">|%*o.             |</span></span><br><span class="line"><span class="string">|OO+o             |</span></span><br><span class="line"><span class="string">+-----------------+</span></span><br></pre></td></tr></table></figure></p>
<p>看到这个界面说明生成成功</p>
<p>copy加密字符到剪切板</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">pbcopy &lt; ~<span class="regexp">/.ssh/i</span>d_rsa.pub</span><br></pre></td></tr></table></figure>
<p>打开你的github<br><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">1. 点击 Account Settings</span><br><span class="line">2. 点击左侧 <span class="string">"SSH Keys"</span> </span><br><span class="line">3. 点击 <span class="string">"Add SSH key"</span></span><br><span class="line">4. 粘贴你的可以到 <span class="string">"Key"</span> 输入框</span><br><span class="line">5. 点击 <span class="string">"Add key"</span></span><br><span class="line">6. 输入你的github密码确认</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>技术随笔</category>
      </categories>
  </entry>
  <entry>
    <title>blog with github(1)-前期准备</title>
    <url>/2013/05/10/blog-with-github/</url>
    <content><![CDATA[<p>##开始之前</p>
<ol>
<li><a href="http://git-scm.com/" target="_blank" rel="noopener">安装Git</a></li>
<li>使用<a href="http://octopress.org/docs/setup/rbenv" target="_blank" rel="noopener">rbenv</a>或者<a href="http://octopress.org/docs/setup/rvm" target="_blank" rel="noopener">RVM</a>安装ruby 1.9.3</li>
</ol>
<p>安装完后确保你的ruby版本是1.9.3<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">ruby -v</span><br></pre></td></tr></table></figure></p>
<p>##设置Octopress</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">git clone <span class="symbol">git:</span>/<span class="regexp">/github.com/imathis</span><span class="regexp">/octopress.git octopress</span></span><br><span class="line"><span class="regexp">cd octopress</span></span><br></pre></td></tr></table></figure>
<p>接下来安装一些依赖</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">gem install bundler</span><br><span class="line">rbenv rehash   </span><br><span class="line">bundle install</span><br></pre></td></tr></table></figure>
<p>安装Octopress默认主题</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">rake install</span><br></pre></td></tr></table></figure>
<p>–未完待续，哥去睡觉</p>
]]></content>
      <categories>
        <category>技术随笔</category>
      </categories>
  </entry>
  <entry>
    <title>使用RVM安装ruby</title>
    <url>/2013/04/10/use-rvm-install-ruby/</url>
    <content><![CDATA[<p>今天突然发现ruby版本不小心又回到了1.8.7，可能是我修改了rvm的配置文件导致的，于是开始折腾安装rvm和ruby</p>
<p>首先还是先安装Homebrew吧<br>很简单，一行代码搞定</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">ruby -e <span class="string">"$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)"</span></span><br></pre></td></tr></table></figure>
<p>安装RVM<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">curl -L <span class="symbol">https:</span>/<span class="regexp">/get.rvm.io | bash -s stable --ruby</span></span><br></pre></td></tr></table></figure></p>
<p>走着走着发现出错了<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Missing required <span class="symbol">packages:</span> autoconf, automake, libtool, pkg-config, libyaml, readline, libxml2, libxslt, libksba, openssl, sqlite.</span><br><span class="line">RVM autolibs is now configured with mode <span class="string">'2'</span> =&gt; <span class="string">'check and stop if missing'</span>,</span><br><span class="line">please run <span class="string">`rvm autolibs enable`</span> to let RVM <span class="keyword">do</span> it<span class="string">'s job or run and read `rvm autolibs [help]`</span></span><br><span class="line"><span class="string">or visit https://rvm.io/rvm/autolibs for more information.</span></span><br><span class="line"><span class="string">There were package installation errors, make sure to read the log.</span></span><br><span class="line"><span class="string">Check Homebrew requirements https://github.com/mxcl/homebrew/wiki/Installation</span></span><br></pre></td></tr></table></figure></p>
<p>透过错误信息，发现缺少一写依赖的包，和rvm的autolibs没打开，这时候我们就通过Homebrew先安装上（具体你要看清楚你缺少的是什么）<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">rvm autolibs enable</span><br><span class="line">rvm reload</span><br><span class="line">brew install autoconf automake libtool pkg-config libyaml readline libxml2 libxslt libksba openssl sqlite</span><br></pre></td></tr></table></figure></p>
<p>漫长的等带后，依赖包终于装完了<br>再次安装RVM</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">curl -L <span class="symbol">https:</span>/<span class="regexp">/get.rvm.io | bash -s stable --ruby</span></span><br></pre></td></tr></table></figure>
<p>就会安装成功，你可以rvm -v查看下版本</p>
<p>安装并设置1.9.3为你的默认版本<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">rvm install <span class="number">1.9</span>.<span class="number">3</span></span><br><span class="line">rvm use <span class="number">1.9</span>.<span class="number">3</span></span><br><span class="line">rvm rubygems latest</span><br></pre></td></tr></table></figure></p>
<p>Finish</p>
]]></content>
      <categories>
        <category>技术随笔</category>
      </categories>
  </entry>
  <entry>
    <title>different of class and category</title>
    <url>/2013/05/10/different-of-class-and-category/</url>
    <content><![CDATA[<p>当需要重写父类中的方法时，这时候定义子类</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">@interface JADanSideController : JASidePanelController</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@implementation JADanSideController</span><br><span class="line"></span><br><span class="line">- (UIBarButtonItem *)leftButtonForCenterPanel&#123;</span><br><span class="line">    </span><br><span class="line">    UIButton *leftBarButton = [UIButton <span class="symbol">buttonWithType:</span>UIButtonTypeCustom];</span><br><span class="line">    [leftBarButton <span class="symbol">setFrame:</span>CGRectMake(<span class="number">0</span>, <span class="number">0</span>, <span class="number">44</span>, <span class="number">30</span>)];</span><br><span class="line">    [leftBarButton <span class="symbol">setBackgroundImage:</span>[UIImage <span class="symbol">imageNamed:</span>@<span class="string">"List_NaviSide.png"</span>] <span class="symbol">forState:</span>UIControlStateNormal];</span><br><span class="line">    [leftBarButton <span class="symbol">addTarget:</span><span class="keyword">self</span> <span class="symbol">action:</span>@selector(<span class="symbol">toggleLeftPanel:</span>) <span class="symbol">forControlEvents:</span>UIControlEventTouchUpInside];</span><br><span class="line">    __autoreleasing UIBarButtonItem *leftBarButtonItem = [[UIBarButtonItem alloc] <span class="symbol">initWithCustomView:</span>leftBarButton];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> leftBarButtonItem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>
<p>当需要为父类添加方法时，这时候定义类别</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">@interface JADanSideController : JASidePanelController</span><br><span class="line"></span><br><span class="line">- (void)setBackGroundColor;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术随笔</category>
      </categories>
  </entry>
  <entry>
    <title>blog with github(2)-部署到github</title>
    <url>/2013/06/03/blog-with-github-2/</url>
    <content><![CDATA[<p>###使用github pages</p>
<p>如果想使用 <a href="http://username.github.io" target="_blank" rel="noopener">http://username.github.io</a> 的域名作为你的blog地址的话，首先要创建一个仓库，名字为你的用户id.github.io（比如我的是welsonla.github.io）</p>
<p>用户使用的是Github Pages的master版本下面的public作为你的网站主目录，你可以通过浏览<a href="http://username.github.io" target="_blank" rel="noopener">http://username.github.io</a> 来查看。如果你想在source这个版本上面维护代码，并且把内容提交到master分支，Octopress有一个命令来帮助你完成这些</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">rake setup_github_pages</span><br></pre></td></tr></table></figure>
<p>然后，他将 </p>
<ol>
<li>询问你的github pages的url</li>
<li>将远程的重‘origin’重命名为‘octopress’</li>
<li>在远程的origin讲你的github pages仓库添加进去</li>
<li>切换当前branch从master切换到source</li>
<li>根据你的仓库名，重新配置你的blog地址</li>
<li>在_deploy目录下面设置master分支，用于部署</li>
</ol>
<p>接下来执行<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">rake generate</span><br><span class="line">rake deploy</span><br></pre></td></tr></table></figure></p>
<p>这将生成你的blog，并将生成的文件copy到_deploy目录下面,并添加到git，将他们commit和push到master分支上面，稍后，你会收到一份来自github的email告诉你，你的提交已经收到，并且很快将发不到你的web上面</p>
<p>并且，不要忘记提交你的代码到source分支</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">'your message'</span></span><br><span class="line">git push origin source</span><br></pre></td></tr></table></figure>
<p>####自定义域名绑定</p>
<p>首先你要source目录下面创建一个CNAME，</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">echo <span class="string">'your-domain.com'</span> &gt;&gt; source/CNAME</span><br></pre></td></tr></table></figure>
<p>之后去你的域名服务商或者你的dns服务商那里创建一条CNAME记录，记录指向的IP为<br>(不要使用顶级域名指向到pages,要使用二级域名)<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="number">207.97</span>.<span class="number">227.245</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>技术随笔</category>
      </categories>
  </entry>
  <entry>
    <title>blog with github(3)-Octopress配置</title>
    <url>/2013/06/03/blog-with-github-3/</url>
    <content><![CDATA[<p>Octopress的配置相当的简单，并且一般配置完成后，你不需要再对Rakefile和_config文件进行修改，下面这些是Octopress的配置文件</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">_config.yml       <span class="comment"># Main config (Jekyll's settings)</span></span><br><span class="line">Rakefile          <span class="comment"># Configs for deployment</span></span><br><span class="line">config.rb         <span class="comment"># Compass config</span></span><br><span class="line">config.ru         <span class="comment"># Rack config</span></span><br></pre></td></tr></table></figure>
<p>Rakefile大多是与部署相关的配置,如果不需要同步的话，你就不需要进行修改</p>
<p>####Blog配置</p>
<p>_config.yml有三部分配置,你必须修改url，并且title，subtitle和author也要修改，还有一些第三方的服务需要启用</p>
<p>#####主配置<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">url:</span>                <span class="comment"># For rewriting urls for RSS, etc</span></span><br><span class="line"><span class="symbol">title:</span>              <span class="comment"># Used in the header and title tags</span></span><br><span class="line"><span class="symbol">subtitle:</span>           <span class="comment"># A description used in the header</span></span><br><span class="line"><span class="symbol">author:</span>             <span class="comment"># Your name, for RSS, Copyright, Metadata</span></span><br><span class="line"><span class="symbol">simple_search:</span>      <span class="comment"># Search engine for simple site search</span></span><br><span class="line"><span class="symbol">description:</span>        <span class="comment"># A default meta description for your site</span></span><br><span class="line"><span class="symbol">date_format:</span>        <span class="comment"># Format dates using Ruby's date strftime syntax</span></span><br><span class="line"><span class="symbol">subscribe_rss:</span>      <span class="comment"># Url for your blog's feed, defauts to /atom.xml</span></span><br><span class="line"><span class="symbol">subscribe_email:</span>    <span class="comment"># Url to subscribe by email (service required)</span></span><br><span class="line"><span class="symbol">category_feeds:</span>     <span class="comment"># Enable per category RSS feeds (defaults to false in 2.1)</span></span><br><span class="line"><span class="symbol">email:</span>              <span class="comment"># Email address for the RSS feed if you want it.</span></span><br></pre></td></tr></table></figure></p>
<p>#####Jekyll&amp;Plugins</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">root:</span>               <span class="comment"># Mapping for relative urls (default: /)</span></span><br><span class="line"><span class="symbol">permalink:</span>          <span class="comment"># Permalink structure for blog posts</span></span><br><span class="line"><span class="symbol">source:</span>             <span class="comment"># Directory for site source files</span></span><br><span class="line"><span class="symbol">destination:</span>        <span class="comment"># Directory for generated site files</span></span><br><span class="line"><span class="symbol">plugins:</span>            <span class="comment"># Directory for Jekyll plugins</span></span><br><span class="line"><span class="symbol">code_dir:</span>           <span class="comment"># Directory for code snippets (for include_code plugin)</span></span><br><span class="line"><span class="symbol">category_dir:</span>       <span class="comment"># Directory for generated blog category pages</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">pygments:</span>           <span class="comment"># Toggle python pygments syntax highlighting</span></span><br><span class="line"><span class="symbol">paginate:</span>           <span class="comment"># Posts per page on the blog index</span></span><br><span class="line"><span class="symbol">pagination_dir:</span>     <span class="comment"># Directory base for pagination URLs eg. /blog/page/2/</span></span><br><span class="line"><span class="symbol">recent_posts:</span>       <span class="comment"># Number of recent posts to appear in the sidebar</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">default_asides:</span>     <span class="comment"># Configure what shows up in the sidebar and in what order</span></span><br><span class="line"><span class="symbol">blog_index_asides:</span>  <span class="comment"># Optional sidebar config for blog index page</span></span><br><span class="line"><span class="symbol">post_asides:</span>        <span class="comment"># Optional sidebar config for post layout</span></span><br><span class="line"><span class="symbol">page_asides:</span>        <span class="comment"># Optional sidebar config for page layout</span></span><br></pre></td></tr></table></figure>
<p>#####第三方配置<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Github - List your github repositories <span class="keyword">in</span> the sidebar</span><br><span class="line">Twitter - Setup a sidebar twitter feed, follow button, <span class="keyword">and</span> tweet button (<span class="keyword">for</span> sharing posts <span class="keyword">and</span> pages).</span><br><span class="line">Google Plus One - Setup sharing <span class="keyword">for</span> posts <span class="keyword">and</span> pages on Google’s plus one network.</span><br><span class="line">Pinboard - Share your recent Pinboard bookmarks <span class="keyword">in</span> the sidebar.</span><br><span class="line">Delicious - Share your recent Delicious bookmarks <span class="keyword">in</span> the sidebar.</span><br><span class="line">Disqus Comments - Add your disqus short name to enable disqus comments on your site.</span><br><span class="line">Google Analytics - Add your tracking id to enable Google Analytics tracking <span class="keyword">for</span> your site.</span><br><span class="line">Facebook - Add a Facebook like button</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>技术随笔</category>
      </categories>
  </entry>
  <entry>
    <title>blog with github(4)-开始写吧，骚年</title>
    <url>/2013/06/03/blog-with-github-4/</url>
    <content><![CDATA[<p>Octopress提供很多的Rake任务去创建post和pages，他还会根据你的posts来生成Category，你可以在atom.xml或者blog/categories/\&lt;category>/atom.xml中找到这些内容</p>
<p>####Post</p>
<p>这些Post页面必须存放在Source/_posts目录下面，并且命名方式和jekyll的命名方式一样，会转换成YYYY-MM-DD-Post-title.markdown，这个文件的名字就是你的blog的url slug，日期帮助你排序这些文章</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">rake new_post[<span class="string">"Title"</span>]</span><br></pre></td></tr></table></figure>
<p>在使用了ZSH的话，你要这样创建</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">rake new_post或者rake new_post[\<span class="string">"Title\"]</span></span><br></pre></td></tr></table></figure>
<p>例如</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">rake new_post[<span class="string">"Zombie Ninjas Attack: A survivor's retrospective"</span>]</span><br><span class="line"> Creates source/_posts/<span class="number">2011</span>-<span class="number">07</span>-<span class="number">03</span>-zombie-ninjas-attack-a-survivors-retrospective.markdown</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">~<span class="regexp">/Code/rails</span><span class="regexp">/octopress(branch:source) » rake new_post                        </span></span><br><span class="line"><span class="regexp">Enter a title for your post: blog-with-github-4</span></span><br><span class="line"><span class="regexp">mkdir -p source/</span>_posts</span><br><span class="line">Creating new <span class="symbol">post:</span> source/_posts/<span class="number">2013</span>-<span class="number">06</span>-<span class="number">03</span>-blog-with-github-<span class="number">4</span>.markdown</span><br></pre></td></tr></table></figure>
<p>生成的内容大致如下</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="symbol">layout:</span> post</span><br><span class="line"><span class="symbol">title:</span> <span class="string">"Zombie Ninjas Attack: A survivor's retrospective"</span></span><br><span class="line"><span class="symbol">date:</span> <span class="number">2011</span>-<span class="number">07</span>-<span class="number">03</span> <span class="number">5</span><span class="symbol">:</span><span class="number">59</span></span><br><span class="line"><span class="symbol">comments:</span> <span class="literal">true</span></span><br><span class="line">external-<span class="symbol">url:</span></span><br><span class="line"><span class="symbol">categories:</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>你可以关闭comments，或者为他添加categories的tag，并且你还可以添加<code>author: Your Name</code>与<code>published: false</code>来控制是否发布</p>
<p>####Page</p>
<p>生成Page的命令</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">rake new_page[<span class="keyword">super</span>-awesome]</span><br><span class="line"><span class="comment"># creates /source/super-awesome/index.markdown</span></span><br><span class="line"></span><br><span class="line">rake new_page[<span class="keyword">super</span>-awesome/page.html]</span><br></pre></td></tr></table></figure>
<p>如果使用了zsh的话，方法要参照post的创建方式</p>
<p>生成的pages的默认内如大致如下</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="symbol">layout:</span> page</span><br><span class="line"><span class="symbol">title:</span> <span class="string">"Super Awesome"</span></span><br><span class="line"><span class="symbol">date:</span> <span class="number">2011</span>-<span class="number">07</span>-<span class="number">03</span> <span class="number">5</span><span class="symbol">:</span><span class="number">59</span></span><br><span class="line"><span class="symbol">comments:</span> <span class="literal">true</span></span><br><span class="line"><span class="symbol">sharing:</span> <span class="literal">true</span></span><br><span class="line"><span class="symbol">footer:</span> <span class="literal">true</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>####Content</p>
<p>如果列表中不想显示全文内容的话，可以添加<code>&lt;!-- more --&gt;</code>标签，这将在文章下面生成一个“Continue →” 链接，链接到全文的地址</p>
<p>###Generate &amp; Preview</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">rake generate   <span class="comment"># Generates posts and pages into the public directory</span></span><br><span class="line">rake watch      <span class="comment"># Watches source/ and sass/ for changes and regenerates</span></span><br><span class="line">rake preview    <span class="comment"># Watches, and mounts a webserver at http://localhost:4000</span></span><br></pre></td></tr></table></figure>
<p>本地使用<a href="http://localhost:4000就可以访问了" target="_blank" rel="noopener">http://localhost:4000就可以访问了</a></p>
]]></content>
      <categories>
        <category>技术随笔</category>
      </categories>
  </entry>
  <entry>
    <title>git笔记</title>
    <url>/2013/06/25/git-note/</url>
    <content><![CDATA[<h4 id="一些全局配置"><a href="#一些全局配置" class="headerlink" title="一些全局配置"></a>一些全局配置</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">git config --global push.default matching</span><br><span class="line"></span><br><span class="line">git config --global color.status auto</span><br><span class="line">git config --global color.diff auto</span><br><span class="line">git config --global color.branch auto</span><br><span class="line">git config --global color.interactive auto</span><br></pre></td></tr></table></figure>
<h4 id="添加所有新文件"><a href="#添加所有新文件" class="headerlink" title="添加所有新文件"></a>添加所有新文件</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>
<h4 id="从版本中去除一个文件"><a href="#从版本中去除一个文件" class="headerlink" title="从版本中去除一个文件"></a>从版本中去除一个文件</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">git rm test.html.rb</span><br></pre></td></tr></table></figure>
<h4 id="假设有很多新文件和删除了好多文件"><a href="#假设有很多新文件和删除了好多文件" class="headerlink" title="假设有很多新文件和删除了好多文件"></a>假设有很多新文件和删除了好多文件</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">git add -A</span><br></pre></td></tr></table></figure>
<h4 id="获取所有远程版本"><a href="#获取所有远程版本" class="headerlink" title="获取所有远程版本"></a>获取所有远程版本</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">git fetch</span><br></pre></td></tr></table></figure>
<h4 id="创建并切换到新分支"><a href="#创建并切换到新分支" class="headerlink" title="创建并切换到新分支"></a>创建并切换到新分支</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">git checkout -b newbranch</span><br></pre></td></tr></table></figure>
<h4 id="切换到分支"><a href="#切换到分支" class="headerlink" title="切换到分支"></a>切换到分支</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure>
<h4 id="迁移原有git项目到新得项目地址"><a href="#迁移原有git项目到新得项目地址" class="headerlink" title="迁移原有git项目到新得项目地址"></a>迁移原有git项目到新得项目地址</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">git remote set-url origin git@git.github.<span class="symbol">com:</span>welsonla/studio.git</span><br></pre></td></tr></table></figure>
<h4 id="查看当前git分支"><a href="#查看当前git分支" class="headerlink" title="查看当前git分支"></a>查看当前git分支</h4><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">branch </span>-r</span><br></pre></td></tr></table></figure>
<h4 id="查看git-log"><a href="#查看git-log" class="headerlink" title="查看git log"></a>查看git log</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>
<h4 id="查看当前tag"><a href="#查看当前tag" class="headerlink" title="查看当前tag"></a>查看当前tag</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure>
<h4 id="创建一个新的tag"><a href="#创建一个新的tag" class="headerlink" title="创建一个新的tag"></a>创建一个新的tag</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">git tag v1.<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h4 id="降当前tag推送到服务器"><a href="#降当前tag推送到服务器" class="headerlink" title="降当前tag推送到服务器"></a>降当前tag推送到服务器</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">git push origin --tags</span><br><span class="line"></span><br><span class="line">推送单个</span><br><span class="line">git push origin v1.<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h4 id="将现有svn项目转换成git项目，并保留所有commit-log"><a href="#将现有svn项目转换成git项目，并保留所有commit-log" class="headerlink" title="将现有svn项目转换成git项目，并保留所有commit log"></a>将现有svn项目转换成git项目，并保留所有commit log</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">git svn clone [SVN-Path]</span><br></pre></td></tr></table></figure>
<h4 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#http://stackoverflow.com/questions/1338728/delete-commits-from-a-branch-in-git</span></span><br><span class="line">git reset --hard commitid</span><br><span class="line">git push --force</span><br></pre></td></tr></table></figure>
<h4 id="ignore"><a href="#ignore" class="headerlink" title="ignore"></a>ignore</h4><h5 id="gitignore-新文件使用正则匹配"><a href="#gitignore-新文件使用正则匹配" class="headerlink" title=".gitignore 新文件使用正则匹配"></a>.gitignore 新文件使用正则匹配</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*<span class="selector-class">.file_extension</span></span><br><span class="line"><span class="selector-class">.idea</span><span class="comment">/*</span></span><br></pre></td></tr></table></figure>
<h5 id="remove-exist-files-现有文件需要软删除"><a href="#remove-exist-files-现有文件需要软删除" class="headerlink" title="remove exist files(现有文件需要软删除)"></a>remove exist files(现有文件需要软删除)</h5><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">git rm -r --cached . /<span class="regexp">/soft delete</span></span><br><span class="line"><span class="regexp">git add .</span></span><br><span class="line"><span class="regexp">git commit -m 'remove ignore files'</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>vim-note</title>
    <url>/2013/07/06/vim-note/</url>
    <content><![CDATA[<p>####移动到行首<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure></p>
<p>####移动到行尾<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$</span><br></pre></td></tr></table></figure></p>
<p>####剪切多行<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">v</span><br><span class="line">向下移动</span><br><span class="line">d</span><br></pre></td></tr></table></figure></p>
<p>####粘贴<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">P</span><br></pre></td></tr></table></figure></p>
<p>####在nerdTree光标处新建一个文件<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">m</span><br></pre></td></tr></table></figure></p>
<p>####删除多行(数字+dd)<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span>dd <span class="comment">#删除5行</span></span><br></pre></td></tr></table></figure></p>
<p>####多行注释<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.ESC+v</span><br><span class="line"><span class="number">2</span>.方向键向下或者向上选中多行</span><br><span class="line"><span class="number">3</span>.Control+v</span><br><span class="line"><span class="number">4</span>.Shift+i</span><br><span class="line"><span class="number">5</span>.<span class="comment">#</span></span><br><span class="line"><span class="number">6</span>.Esc,Esc</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>工具控</category>
      </categories>
  </entry>
  <entry>
    <title>generate new host RSA key</title>
    <url>/2013/08/06/generate-new-host-rsa-key/</url>
    <content><![CDATA[<p>最近oschina的git服务器进行了迁移，导致了原有的git项目push不上去，总是提示</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@       <span class="symbol">WARNING:</span> POSSIBLE DNS SPOOFING DETECTED!          @</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">The RSA host key <span class="keyword">for</span> git.oschina.net has changed,</span><br><span class="line"><span class="keyword">and</span> the key <span class="keyword">for</span> the corresponding IP address <span class="number">112.124</span>.<span class="number">6.106</span></span><br><span class="line">is unknown. This could either mean that</span><br><span class="line">DNS SPOOFING is happening <span class="keyword">or</span> the IP address <span class="keyword">for</span> the host</span><br><span class="line"><span class="keyword">and</span> its host key have changed at the same time.</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@    <span class="symbol">WARNING:</span> REMOTE HOST IDENTIFICATION HAS CHANGED!     @</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</span><br><span class="line">Someone could be eavesdropping on you right now (man-<span class="keyword">in</span>-the-middle attack)!</span><br><span class="line">It is also possible that a host key has just been changed.</span><br></pre></td></tr></table></figure>
<p><del>第一个问题非常简单，就是修改/etc/hosts，添加一个IP与域名的对应关系即可</del></p>
<p>第二个是要求你更新know_host中的RSA key，执行如下命令即可</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">ssh-keygen -R git.oschina.net</span><br></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">cat /.ssh/known_hosts</span><br></pre></td></tr></table></figure>
<p>查看known_host中的数据可以看到key已经更新了</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>encrypt sqlite with sqlcipher</title>
    <url>/2013/08/13/encrypt-sqlite-with-sqlcipher/</url>
    <content><![CDATA[<p>##Get the sqlcipher SourceCode</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用2.1的版本比较稳定些</span></span><br><span class="line"><span class="symbol">https:</span>/<span class="regexp">/github.com/welsonla</span><span class="regexp">/sqlcipher/archive</span><span class="regexp">/v2.1.1.tar.gz</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>##Complite the source code<br>动态链接的编译方法（Compiling with dynamic linking）[推荐]:</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">./configure --enable-tempstore=yes CFLAGS=<span class="string">"-DSQLITE_HAS_CODEC"</span> LDFLAGS=<span class="string">"-lcrypto"</span></span><br><span class="line"> make</span><br><span class="line"> ln -s /Users/wanyc/sqlcipher/sqlite3 /usr/bin/sqlcipher</span><br></pre></td></tr></table></figure>
<p><del>静态库的编译方法: (replace /path/to with the path to libcrypto.a)</del><br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#./configure --enable-tempstore=yes CFLAGS="-DSQLITE_HAS_CODEC" LDFLAGS="/path/to/libcrypto.a"</span></span><br><span class="line"><span class="comment">#make</span></span><br></pre></td></tr></table></figure></p>
<p>##How to encrypt a sqlite(In Shell)</p>
<p>#加密数据库几种方式</p>
<p>####1.shell方式加密一个sqlite</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">sqlcipher test.db</span><br><span class="line">&gt; PRAGMA key=<span class="string">'test'</span>; <span class="regexp">//</span>必须在打开数据库第一步来执行</span><br></pre></td></tr></table></figure>
<p>####2.（In shell）<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">sqlciper test.db</span><br><span class="line">PRAGMA KEY=<span class="string">'helloworld'</span>;<span class="comment">#第一步必须执行</span></span><br><span class="line">ATTACH DATABASE <span class="string">'encrypted.db'</span> as encrypted KEY <span class="string">'SomePassword'</span>; <span class="regexp">//encrypted</span>.db是要导出的新的数据库</span><br><span class="line">SELECT sqlcipher_export(<span class="string">'encrypted'</span>);</span><br><span class="line">DETACH DATABASE encrypted;</span><br></pre></td></tr></table></figure></p>
<p>#####3..Object-c代码实现对一个非加密库导入到加密库的方法(已经验证)(Xcode)<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">NSString *documentPath = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask, YES) <span class="symbol">objectAtIndex:</span><span class="number">0</span>];</span><br><span class="line">NSString *attachPath = [documentPath <span class="symbol">stringByAppendingPathComponent:</span>@<span class="string">"new.db"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sqlite3_open([path_u UTF8String], &amp;convert_DB) == SQLITE_OK) &#123;</span><br><span class="line">		NSString *sql = [NSString <span class="symbol">stringWithFormat:</span>@<span class="string">"ATTACH DATABASE '%@' AS encrypted KEY '1234';"</span>,attachPath];</span><br><span class="line">	</span><br><span class="line">		/<span class="regexp">/执行Attach操作</span></span><br><span class="line"><span class="regexp">	  sqlite3_exec(convert_DB, [sql UTF8String] , NULL, NULL, NULL);</span></span><br><span class="line"><span class="regexp">  </span></span><br><span class="line"><span class="regexp">	  /</span><span class="regexp">/ 导出数据库</span></span><br><span class="line"><span class="regexp">	  sqlite3_exec(convert_DB, "SELECT sqlcipher_export('encrypted');", NULL, NULL, NULL);</span></span><br><span class="line"><span class="regexp">  </span></span><br><span class="line"><span class="regexp">	  /</span><span class="regexp">/ 执行分离</span></span><br><span class="line"><span class="regexp">	  sqlite3_exec(convert_DB, "DETACH DATABASE encrypted;", NULL, NULL, NULL);</span></span><br><span class="line"><span class="regexp">  </span></span><br><span class="line"><span class="regexp">	  NSLog (@"End database copying at %@",[NSDate date]);</span></span><br><span class="line"><span class="regexp">	  sqlite3_close(convert_DB);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">else &#123;</span></span><br><span class="line"><span class="regexp">    sqlite3_close(convert_DB);</span></span><br><span class="line"><span class="regexp">    NSAssert1(NO, @"Failed to open database with message '%s'.", sqlite3_errmsg(convert_DB));</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>#为加密数据库解密</p>
<p>####1.先导出现有库的数据(In shell)<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">sqlcipher plaintext.db</span><br><span class="line">.output dsa.sql</span><br><span class="line">.dump</span><br></pre></td></tr></table></figure></p>
<p>####将新的数据库导出，并加密，之后导入非加密的库里面的数据<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">sqlcipher another.db</span><br><span class="line">PRAGMA key=<span class="string">'aaa'</span>;</span><br><span class="line">.read dsa.sql</span><br></pre></td></tr></table></figure></p>
<p>####2. 为加密后的sqlite执行解密(其实步骤与加密一样，只要把key设置为空就实现了不加密)<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">ATTACH DATABASE <span class="string">'encrypted.db'</span> as encrypted KEY <span class="string">''</span>; <span class="regexp">//encrypted</span>.db是要导出的新的数据库</span><br><span class="line">SELECT sqlcipher_export(<span class="string">'encrypted'</span>);</span><br><span class="line">DETACH DATABASE encrypted;</span><br></pre></td></tr></table></figure></p>
<p>####3.（In shell）<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">sqlciper test.db</span><br><span class="line">PRAGMA KEY=<span class="string">'helloworld'</span>;<span class="comment">#第一步必须执行</span></span><br><span class="line">ATTACH DATABASE <span class="string">'encrypted.db'</span> as encrypted KEY <span class="string">''</span>;</span><br><span class="line">SELECT sqlcipher_export(<span class="string">'encrypted'</span>);</span><br><span class="line">DETACH DATABASE encrypted;</span><br></pre></td></tr></table></figure></p>
<p>##参考</p>
<ul>
<li>sqlcipher配置 <a href="http://sqlcipher.net/ios-tutorial/" target="_blank" rel="noopener">http://sqlcipher.net/ios-tutorial/</a>  </li>
<li>sqlcipher API <a href="http://sqlcipher.net/sqlcipher-api/" target="_blank" rel="noopener">http://sqlcipher.net/sqlcipher-api/</a></li>
<li>sqlcipher 使用 <a href="http://jordy.easymorse.com/?p=970" target="_blank" rel="noopener">http://jordy.easymorse.com/?p=970</a></li>
<li>Mac SQLCipher导出工具 <a href="https://github.com/welsonla/SQLCipherExport" target="_blank" rel="noopener">https://github.com/welsonla/SQLCipherExport</a></li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
  </entry>
  <entry>
    <title>我的2013</title>
    <url>/2014/01/02/my-2013/</url>
    <content><![CDATA[<p>####作品</p>
<ol>
<li>对晴天进行了两次更新;</li>
<li>和小伙伴们一起做了一个密码管理的软件<a href="https://itunes" target="_blank" rel="noopener">passbox</a></li>
<li>写了一个对SQLCipher加密数据库转换的Mac程序</li>
</ol>
<p>####读书</p>
<ol>
<li>《打造Facebook》</li>
<li>《MacTack人生元编程》</li>
<li>《写给程序员的Web设计书》</li>
<li>《写给大家看的Web设计书》</li>
<li>《淘宝技术这十年》</li>
<li>《苹果开发之Cocoa编程》</li>
<li>《代码整洁之道》</li>
</ol>
<p>####健康<br>12年有一阵子住院，13年特别注意锻炼身体，9月份每天和几个朋友去紫竹院跑步运动。强度不是很大，天气渐冷，入冬，雾霾跟严寒，使运动停止。</p>
<p>13年身体并没有什么大碍，感谢</p>
<p>####技术<br>感觉自己这一年的技术，进步不大，惭愧。在用户体验跟交互方面，倒是有了一些自己的心得。对Mac的编程有了越来越浓厚的兴趣。</p>
<p>####济南<br>从十月份，陆续跟女朋友在济南看了几套房子。主要参考的房子是90平米以上可以落户的房子，现在我女人已经开始考虑学区的问题了，经十路沿线现在也越来越多的高楼在崛起，房价也在逐渐的攀高，房价是每个年轻人心里的痛。</p>
<p>####2014</p>
<ol>
<li>多读书</li>
<li>更多的iOS上的作品</li>
<li>更多的Mac应用</li>
<li>深入Object-c，并继续强化Ruby on Rails</li>
<li>锻炼身体</li>
<li>从AppStore赚多一点钱</li>
<li>与几个朋友的小工作室，希望我们能成为TapBot</li>
<li>换新工作 </li>
<li>买房结婚(房子已买)</li>
</ol>
]]></content>
      <categories>
        <category>life</category>
      </categories>
  </entry>
  <entry>
    <title>你的Mac慢了么</title>
    <url>/2014/04/12/why-my-mac-so-slow/</url>
    <content><![CDATA[<p>本子是MC700,已经陪伴我coding了三年,中间升级了内存,硬盘加了SSD,但是自从电池坏掉以后,我拆掉了电池,接电使用,发现越来越卡,经历了三个月左右的煎熬,我的mac终于又重新焕发了青春,说说遇到的问题</p>
<a id="more"></a>
<ol>
<li><p>必须安装电池,电池坏掉的话,赶紧买新的装上,否则你的macbook会降频运行</p>
<blockquote>
<p>这就是为什么我是SSD硬盘,依然感觉慢的要死的原因,之前电池坏了,本想着拆下来,裸奔运行,后来就发现本子卡的不行.检测你的macbook是否在降频运行,可以使用这个小工具<a href="http://software.intel.com/en-us/articles/intel-power-gadget-20" target="_blank" rel="noopener">Intel(R) Power Gadget</a></p>
</blockquote>
</li>
<li><p>使用时间长,本子会发热,你会发现kenerl_task这个进程占用的CPU特别大,试着用一些软件为mac降温</p>
<blockquote>
<p>推荐<a href="http://www.crystalidea.com/macs-fan-control" target="_blank" rel="noopener">Macs Fan Control </a>,能固定风扇的转速,防止温度飙的很高</p>
</blockquote>
</li>
<li><p>如果是自己加装的SSD,默认trim是不打开的,需要自己使用打开</p>
<blockquote>
<p>推荐一个小工具<a href="http://www.cindori.org/software/trimenabler/" target="_blank" rel="noopener">trim enables</a><br>  如果你是geek,也可以使用命令行打开trim,打开后需要重启你的电脑,看看这个gist上<a href="https://gist.github.com/return1/4058659" target="_blank" rel="noopener">trim_enabler.sh</a></p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>Learn core animation the hard way</title>
    <url>/2014/05/11/learn-core-animation-the-hard-way/</url>
    <content><![CDATA[<p>###Document</p>
<ol>
<li><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/CoreAnimation_guide/Key-ValueCodingExtensions/Key-ValueCodingExtensions.html#//apple_ref/doc/uid/TP40004514-CH12-SW8" target="_blank" rel="noopener">CABasicAnimation Keypath</a></li>
<li><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/Animation_Types_Timing/Articles/PropertyAnimations.html" target="_blank" rel="noopener">Animation Types and Timing Programming Guide</a></li>
<li><a href="https://developer.apple.com/library/mac/documentation/graphicsimaging/reference/CGAffineTransform/Reference/reference.html" target="_blank" rel="noopener">CGAffineTransform</a></li>
<li><a href="https://developer.apple.com/library/mac/documentation/graphicsimaging/Conceptual/drawingwithquartz2d/Introduction/Introduction.html#//apple_ref/doc/uid/TP30001066" target="_blank" rel="noopener">Quartz 2D Programming Guide</a></li>
<li><a href="http://baike.baidu.com/view/954621.htm" target="_blank" rel="noopener">放射变换</a></li>
<li><a href="http://www.cnblogs.com/xiaodao/archive/2012/02/10/2345481.html" target="_blank" rel="noopener">组合动画</a></li>
<li><a href="http://www.cnblogs.com/v2m_/archive/2013/05/09/3070187.html" target="_blank" rel="noopener">http://www.cnblogs.com/v2m_/archive/2013/05/09/3070187.html</a></li>
<li><a href="http://www.cnblogs.com/sell/archive/2013/02/01/2889013.html" target="_blank" rel="noopener">几个常用动画代码</a></li>
</ol>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
  </entry>
  <entry>
    <title>Instruments无法启动</title>
    <url>/2014/07/14/instrument-start-fail/</url>
    <content><![CDATA[<p>最近在iOS7的系统上使用Instrument想检查内存的leaks，启动时候总是提示失败，花了些时间，解决了这个问题，做下笔记。</p>
<a id="more"></a>
<p>##issue<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Error Starting Recording</span><br><span class="line">At least one target failed to launch; aborting run</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Target failed to run. Permisson to debug [app name] was denied. The app must be signed with a development identity (i.e. iOS Developer)</span><br></pre></td></tr></table></figure></p>
<p><img src="http://ww4.sinaimg.cn/large/6e8de9dbgw1eice18vkrej20rs0jmgnq.jpg" alt="http://ww4.sinaimg.cn/large/6e8de9dbgw1eice18vkrej20rs0jmgnq.jpg"></p>
<p>##fix<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Product--&gt;Scheme--&gt;Edit Scheme,将Profile那栏中的Build Configuration将Release改为Debug</span><br></pre></td></tr></table></figure></p>
<p><img src="http://ww1.sinaimg.cn/large/6e8de9dbgw1eice66ef74j20jg0d7759.jpg" alt="http://ww1.sinaimg.cn/large/6e8de9dbgw1eice66ef74j20jg0d7759.jpg"></p>
<p>##issue<br>1.如果发现leaks视图无法监控到任何的内存泄露，说明你开启了Zombie，将Scheme菜单中的<code>Enable Zombie Objects</code>勾去就可以了<br>2.检查你是否启用了环境变量，变量中是否开启了zombie设置</p>
<p><img src="http://ww4.sinaimg.cn/large/6e8de9dbgw1eiceaztirjj20ee0arq3q.jpg" alt="http://ww4.sinaimg.cn/large/6e8de9dbgw1eiceaztirjj20ee0arq3q.jpg"></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
  </entry>
  <entry>
    <title>Xcode5 install command line tools</title>
    <url>/2014/07/14/xcode5-install-command-line-tools/</url>
    <content><![CDATA[<p>之前遇到过，一直没做笔记，导致每次都要现查</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>iOS</category>
      </categories>
  </entry>
  <entry>
    <title>Mac Mini开箱</title>
    <url>/2014/11/22/mac-mini-show/</url>
    <content><![CDATA[<p>###背景<br>从3月份换了新工作，就一直在使用自己的电脑，每天背着上下班，后来自己又买了显示器和新的机械键盘。想想这时候如果上Mac mini的话，外设都已经齐全了。<br>一直在等9月份的Mini新版，无奈对新版确实有些失望，一直摇摆不定，恰巧双十一的前一天，发现京东的MD387已经降价到了3588，果断决定入手了。</p>
<a id="more"></a>
<p>###开箱<br>11.11日下午收到了京东的货，用的京东白条，可以到12.10日进行还款，这个给京东点赞</p>
<p><img src="http://ww2.sinaimg.cn/large/6e8de9dbgw1emk7661ob8j21kw23u7wh.jpg =500x" alt="Mini"></p>
<p>####正面照<br><img src="http://ww2.sinaimg.cn/large/6e8de9dbjw1emk8q9x5caj21kw23u7sd.jpg =500x" alt="mini front"></p>
<p>####背后有丰富的插口，再也不用担心USB口不够用了<br><img src="http://ww2.sinaimg.cn/large/6e8de9dbgw1emk78er4izj21kw23u7sd.jpg =500x" alt="Mini back"></p>
<p>####配件是有一个HDMI转DVI的口<br><img src="http://ww1.sinaimg.cn/large/6e8de9dbgw1emk7a8ffzjj21kw23unj2.jpg  =500x" alt="Mini support"></p>
<p>###升级<br>如果要换内存的话，是不用拧一颗螺丝的，旋转后壳，就能取下底部的壳,内部结构太美了<br><img src="http://ww4.sinaimg.cn/large/6e8de9dbgw1emk7crpjh4j21kw16oqmn.jpg =400x" alt="Mini inside"></p>
<p>###使用</p>
<p>#####显示特别模糊</p>
<p>当我接上显示器的那一刻，我感觉眼睛都要瞎了，一定是我打开方式不对，屏幕为什么这么模糊，后来上网搜了一下，很多人都有这个问题。<br>有人说线的问题，我换了几条线，显示效果都是一样糟糕<br>后来终于找到了问题，并且感谢大神给的解决方案。<a href="http://adolfzer.blogspot.com/2013/05/mac-osx.html" target="_blank" rel="noopener">Mac OSX 顯示模糊問題，完全解決辦法</a></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">mac的電腦如果搭配自家螢幕可能不會有這問題，</span><br><span class="line"></span><br><span class="line">不過如果不是用Apple的螢幕，然後又是跟我一樣是用HDMI輸出的話，</span><br><span class="line"></span><br><span class="line">那畫面就一定很難好了，</span><br></pre></td></tr></table></figure>
<p>我把这个脚本放到了<a href="https://gist.github.com/welsonla/e43ba2ba039c7ecd475d" target="_blank" rel="noopener">gist</a>上面，你复制保存到本地，命名为<code>patch-edid.rb</code><br>将这个patch放到你的文档下，然后运行,会生成一套显示器配置<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">ruby patch-edid.rb</span><br></pre></td></tr></table></figure></p>
<p>将这套配置，放到系统<code>/System/Library/Displays/Overrides</code>,重启后就会生效了。</p>
<p>#####打开trim，支持10.10<br>鉴于网上脚本众多，而trim enabler又让很多电脑出现了问题，现在终于发现一款10.10下完美的打开Trim的工具(free)</p>
<p><a href="http://chameleon.alessandroboschini.com/" target="_blank" rel="noopener">Chameleon</a></p>
<p><img src="http://ww2.sinaimg.cn/large/6e8de9dbjw1emk7zcot3oj20880d9t95.jpg" alt="Chameleon"></p>
<p>###总结<br>使用中，将MC700上的8G内存换到了Mini上面，现在的配置是<br><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> Mac Mini : DDR3 <span class="number">1333</span> <span class="number">8</span>G</span><br><span class="line"><span class="number">2.</span> MC700 : <span class="number">4</span>G DDR3 <span class="number">1600</span>, Sandisk SSD <span class="number">128</span></span><br></pre></td></tr></table></figure></p>
<p>由于近期开销比较大，这样对两台机器进行了一个互补，发现都还可以进行正常的开发，但Mini还是要比我的MC700要快很多，不知道这台MC700还能陪伴我多久。</p>
<p>感谢老婆，让我这次败家，有了一个一直以来梦寐以求的工作套装</p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
  </entry>
  <entry>
    <title>cocoa简洁写法笔记</title>
    <url>/2014/09/05/cocoa-tidy-write/</url>
    <content><![CDATA[<p>对cocoa的一些语法糖做的笔记<br><a id="more"></a></p>
<h3 id="NSNumber"><a href="#NSNumber" class="headerlink" title="NSNumber"></a>NSNumber</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">NSNumber *totalNumber = [NSNumber <span class="symbol">numberWithInt:</span><span class="number">1</span>];</span><br><span class="line">to</span><br><span class="line">NSNumber *totalNumber = @1;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 更多拓展</span></span><br><span class="line">NSNumber *floatNumber = @2.<span class="number">5</span>f;</span><br><span class="line">NSNumber *boolNumber = @YES;</span><br><span class="line">NSNumber *totalNumber = @(<span class="number">5</span> * <span class="number">6.5</span>f);</span><br></pre></td></tr></table></figure>
<h3 id="NSArray"><a href="#NSArray" class="headerlink" title="NSArray"></a>NSArray</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">NSArray *members = [NSArray <span class="symbol">arrayWithObjects:</span>@<span class="string">"father"</span>,@<span class="string">"mother"</span>,@<span class="string">"Jim"</span>,<span class="literal">nil</span>];</span><br><span class="line">to</span><br><span class="line">NSArray *members = @[@<span class="string">"father"</span>,@<span class="string">"mother"</span>,@<span class="string">"Jim"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取值</span></span><br><span class="line">NSString *username = [members <span class="symbol">objectAtIndex:</span><span class="number">2</span>];</span><br><span class="line">to</span><br><span class="line">NSString *username = members[<span class="number">2</span>];</span><br></pre></td></tr></table></figure>
<h3 id="NSDictionary"><a href="#NSDictionary" class="headerlink" title="NSDictionary"></a>NSDictionary</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">NSDictionary *personData = [NSDictionary <span class="symbol">dictionaryWithObjectsAndKeys:</span>@<span class="string">"Jim"</span>,@<span class="string">"name"</span>,@<span class="string">"man"</span>,@<span class="string">"gender"</span>,<span class="literal">nil</span>];</span><br><span class="line">to</span><br><span class="line">NSDictionary *personData = @&#123;@<span class="string">"name"</span><span class="symbol">:</span>@<span class="string">"Jim"</span>,</span><br><span class="line">							 @<span class="string">"gender"</span><span class="symbol">:</span>@<span class="string">"man"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取值</span></span><br><span class="line">NSString *username = [personData <span class="symbol">objectForKey:</span>@<span class="string">"name"</span>];</span><br><span class="line">to</span><br><span class="line">NSString *username = person[@<span class="string">"name"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设值和替换</span></span><br><span class="line">[personData <span class="symbol">replaceObjectAtIndex:</span><span class="number">1</span> <span class="symbol">withOjbect:</span>@<span class="string">"woman"</span>];</span><br><span class="line">[personData <span class="symbol">setObject:</span>@<span class="string">"address"</span> <span class="symbol">forKey:</span>@<span class="string">"Beijing"</span>];</span><br><span class="line">to</span><br><span class="line">person[<span class="number">1</span>] = @<span class="string">"woman"</span>;</span><br><span class="line">person[@<span class="string">"address"</span>] = @<span class="string">"Beijing"</span>;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>我的2014</title>
    <url>/2015/02/01/my-2014/</url>
    <content><![CDATA[<h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>今年完成了几件大事:<br>三月，订婚<br>五月，买房，成为了房奴<br>八月，拍婚纱照<br>九月，结婚</p>
<p>今年生活上发生了很大的变化，与小关关组建了新的家庭，也让我肩负起了一个男人的责任，为了我们新的生活而奋斗。希望我能为家人和老婆创造更好的生活条件。</p>
<p>感谢小关同志的陪伴与理解，七年长跑，我们终于走到了一起</p>
<h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>今年工作发生了变动，离开了工作三年的老东家，加入了新公司，在各方面都对自己的提升非常大，技术上有了比较明显的提升，由于产品是直接面对用户的，在各方面的细节的要求也比较高，尤其是用户体验方面。</p>
<p>跨部门沟通上，由于团队非常大，涉及的业务部门也比较多，这一年有了不少机会与别的部门进行工作上的沟通协作，与人沟通上，也让我不再对人际交往有恐惧感。</p>
<p>工作方式上，拆分复杂业务，从最小的点逐步分析整个复杂的功能系统，在功能的实现上有了更明确的思路，对时间节点也有了更好的控制。抽离与重用，减少重复代码，精简了项目代码，提高了可扩展性。</p>
<p>通过龙哥的处理问题的方式跟思路，也让我积累到了很多宝贵的编程经验：</p>
<ul>
<li>清晰的调试思路与正确的分析，在一些棘手的问题上，不再是猜和逃避，而要找到出错的地方进行修复；</li>
<li>对公共资源的全局封装，自定义的Color使用Category方法封装，比用宏定义更优雅；</li>
<li>对业务的不同状态进行枚举化，使用起来更可读</li>
<li>对Notification的name常量化，更易查找</li>
<li>接口都继承自同一基类，公共的处理由基类完成，在较大变动的情况下，只需要在基类做出理，就能兼容新需求</li>
<li>特定符号写成常量，如接口返回值，在接口变动时只需要修改下常量即可  </li>
</ul>
<h2 id="推荐的书"><a href="#推荐的书" class="headerlink" title="推荐的书"></a>推荐的书</h2><ul>
<li>《我编程，我快乐》</li>
<li>《大教堂与集市》</li>
<li>《重来》</li>
</ul>
<p>bye, 2014</p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
  </entry>
  <entry>
    <title>Rails code snippets</title>
    <url>/2015/04/12/rails-code-snippets/</url>
    <content><![CDATA[<p>(摘录来自: persie. “Ruby on Rails 教程”)</p>
<h3 id="short-key"><a href="#short-key" class="headerlink" title="short key"></a>short key</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">g   generate</span><br><span class="line">d   destory</span><br><span class="line">s   server</span><br></pre></td></tr></table></figure>
<h3 id="脚手架以及一些常用的变量类型"><a href="#脚手架以及一些常用的变量类型" class="headerlink" title="脚手架以及一些常用的变量类型"></a>脚手架以及一些常用的变量类型</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">rails g scaffold user <span class="symbol">name:</span>string <span class="symbol">age:</span>int <span class="symbol">email:</span>string <span class="symbol">description:</span>text <span class="symbol">cash:</span>float</span><br></pre></td></tr></table></figure>
<h3 id="删除脚手架生成的代码"><a href="#删除脚手架生成的代码" class="headerlink" title="删除脚手架生成的代码"></a>删除脚手架生成的代码</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">rails d scaffold Users</span><br></pre></td></tr></table></figure>
<h3 id="生成Controller与action"><a href="#生成Controller与action" class="headerlink" title="生成Controller与action"></a>生成Controller与action</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">rails g controller TodoList list delete index</span><br></pre></td></tr></table></figure>
<h3 id="删除Controller"><a href="#删除Controller" class="headerlink" title="删除Controller"></a>删除Controller</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">rails d controller TodoList list delete index</span><br></pre></td></tr></table></figure>
<h3 id="生成Model"><a href="#生成Model" class="headerlink" title="生成Model"></a>生成Model</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">rails g model User <span class="symbol">name:</span>string <span class="symbol">email:</span>string</span><br></pre></td></tr></table></figure>
<h3 id="删除Model"><a href="#删除Model" class="headerlink" title="删除Model"></a>删除Model</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">rails d model User <span class="symbol">name:</span>string <span class="symbol">email:</span>string</span><br></pre></td></tr></table></figure>
<h3 id="添加字段到表"><a href="#添加字段到表" class="headerlink" title="添加字段到表"></a>添加字段到表</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">“rails generate migration add_password_digest_to_users <span class="symbol">password_digest:</span>string”</span><br></pre></td></tr></table></figure>
<h3 id="根据Model生成数据库表"><a href="#根据Model生成数据库表" class="headerlink" title="根据Model生成数据库表"></a>根据Model生成数据库表</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">rake <span class="symbol">db:</span>migrate</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ruby</category>
      </categories>
  </entry>
  <entry>
    <title>关于Xcode单元测试(XCTest)的一些总结</title>
    <url>/2015/05/04/something-about-xctest/</url>
    <content><![CDATA[<p>单元测试可以让我们快速检测项目接口与一些功能的可用性，这次编写了大量的单元测试，让我对之前的一些疑惑有了一个透彻的理解</p>
<ul>
<li>单元测试中，可以直接import我们项目中的类</li>
<li>想要执行的方法，必须使用test开头，testLogin会被执行，userLogin这样的方法名不会被执行</li>
<li>单元测试没有头文件，一些变量声明，写在interface里面</li>
<li>对于一些变量的初始化，放到setup里面进行</li>
</ul>
<a id="more"></a>
<h2 id="一个简单的单元测试类"><a href="#一个简单的单元测试类" class="headerlink" title="一个简单的单元测试类"></a>一个简单的单元测试类</h2><h5 id="创建单元测试类"><a href="#创建单元测试类" class="headerlink" title="创建单元测试类"></a>创建单元测试类</h5><p><img src="http://ww1.sinaimg.cn/large/6e8de9dbgw1ers0n47wtrj20ka0bygnf.jpg" alt></p>
<h4 id="一个简单的类"><a href="#一个简单的类" class="headerlink" title="一个简单的类"></a>一个简单的类</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#import &lt;UIKit/UIKit.h&gt;</span></span><br><span class="line"><span class="comment">#import &lt;XCTest/XCTest.h&gt;</span></span><br><span class="line"><span class="comment">#import "LoginService.h" //引入自定义的类</span></span><br><span class="line"></span><br><span class="line">@interface HelloTest : XCTestCase</span><br><span class="line">&#123;</span><br><span class="line">	/<span class="regexp">/变量声明		</span></span><br><span class="line"><span class="regexp">    NSInteger count;</span></span><br><span class="line"><span class="regexp">    LoginService *loginService;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">@end</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">@implementation HelloTest</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">- (void)setUp &#123;</span></span><br><span class="line"><span class="regexp">    [super setUp];</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/初始化</span></span><br><span class="line"><span class="regexp">    count = 5;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    loginService = [[LoginService alloc] init];</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">- (void)tearDown &#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    [super tearDown];</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">- (void)testCount</span></span><br><span class="line"><span class="regexp">&#123;</span></span><br><span class="line"><span class="regexp">    XCTAssertEqual(count, 6,@"count不等于6,count的值为:%ld",(long)count);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">- (void)testExample &#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    XCTAssert(YES, @"Pass");</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">- (void)testPerformanceExample &#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    [self measureBlock:^&#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &#125;];</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">@end</span></span><br></pre></td></tr></table></figure>
<p><strong>cmd+U</strong> 进行执行后会提示我们如下错误,测试通过的方法，会有绿色对号，失败的方法会显示我们写的错误提示<br><img src="http://ww1.sinaimg.cn/large/6e8de9dbgw1ers0vuinl5j20p405jq49.jpg" alt></p>
<h2 id="XCTest的测试方法大都类似"><a href="#XCTest的测试方法大都类似" class="headerlink" title="XCTest的测试方法大都类似"></a>XCTest的测试方法大都类似</h2><h4 id="XCTAssertGreaterThan"><a href="#XCTAssertGreaterThan" class="headerlink" title="XCTAssertGreaterThan"></a>XCTAssertGreaterThan</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#判断count是否大于8</span></span><br><span class="line">XCTAssertGreaterThan(count, <span class="number">8</span>,@<span class="string">"count is not greater than 8"</span>);</span><br></pre></td></tr></table></figure>
<h4 id="XCTAssertNotEqual"><a href="#XCTAssertNotEqual" class="headerlink" title="XCTAssertNotEqual"></a>XCTAssertNotEqual</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#判断是否不相等</span></span><br><span class="line">XCTAssertNotEqual(count, <span class="number">5</span>,@<span class="string">"they are equal"</span>);</span><br></pre></td></tr></table></figure>
<h4 id="XCTAssertTrue"><a href="#XCTAssertTrue" class="headerlink" title="XCTAssertTrue"></a>XCTAssertTrue</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#判断某个表达式是否成立</span></span><br><span class="line">XCTAssertTrue(count&gt;<span class="number">3</span>,@<span class="string">"count greater than 3"</span>);</span><br></pre></td></tr></table></figure>
<p>运行结果<br><img src="http://ww4.sinaimg.cn/large/6e8de9dbgw1ers16kf52bj210v04jn03.jpg" alt></p>
<h2 id="对于异步方法的测试-Asynchronous-Testing"><a href="#对于异步方法的测试-Asynchronous-Testing" class="headerlink" title="对于异步方法的测试(Asynchronous Testing)"></a>对于异步方法的测试(Asynchronous Testing)</h2><p>对于block等异步方式执行的方法，在测试的时候，我们要使用，一般的做法都是延迟，<strong>等待block执行完毕再进行检查</strong></p>
<h5 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h5><ul>
<li>声明一个XCTestExpectation</li>
<li>在block中使用fulfill抛出错误</li>
<li>waitForExpectationsWithTimeout进行一个延迟时间设定</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#import &lt;XCTest/XCTestCase+AsynchronousTesting.h&gt;</span></span><br></pre></td></tr></table></figure>
<p>比如上面的loginService</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">- (void)testLogin</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">##声明一个Exception</span></span><br><span class="line">    XCTestExpectation *loginException = [<span class="keyword">self</span> <span class="symbol">expectationWithDescription:</span>@<span class="string">"loginError"</span>];</span><br><span class="line"></span><br><span class="line">    [loginService <span class="symbol">sendLoginWithMobile:</span>TEST_MOBILE <span class="symbol">andCode:</span>TEST_CODE <span class="symbol">onComplete:</span>^(NSDictionary *jsonDict, NSString *jsonString) &#123;</span><br><span class="line">        MStatus *status = [loginService <span class="symbol">convertToMStatus:</span>jsonDict];</span><br><span class="line">        XCTAssertEqual(status.returncode, <span class="number">0</span>, @<span class="string">"login error"</span>);</span><br><span class="line"></span><br><span class="line">        /<span class="regexp">/抛出错误</span></span><br><span class="line"><span class="regexp">        [loginException fulfill];</span></span><br><span class="line"><span class="regexp">    &#125; onFailure:^(NSString *msg) &#123;</span></span><br><span class="line"><span class="regexp">        XCTFail(@"login error:%@",msg);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/抛出错误</span></span><br><span class="line"><span class="regexp">        [loginException fulfill];</span></span><br><span class="line"><span class="regexp">    &#125;];</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/延迟两秒执行</span></span><br><span class="line"><span class="regexp">    [self waitForExpectationsWithTimeout:2 handler:^(NSError *error) &#123;</span></span><br><span class="line"><span class="regexp">        XCTFail(@"time out:%@",error);</span></span><br><span class="line"><span class="regexp">    &#125;];</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
  </entry>
  <entry>
    <title>Application Transport Security</title>
    <url>/2015/07/13/application-transport-security-in-ios9/</url>
    <content><![CDATA[<p>In Xcode7 You should add follow keys in <code>Info.plist</code> to allow the http request<br>A detail discuss could fond here<br><a href="https://forums.developer.apple.com/thread/3544" target="_blank" rel="noopener">https://forums.developer.apple.com/thread/3544</a></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&lt;key&gt;NSAppTransportSecurity&lt;<span class="regexp">/key&gt;  </span></span><br><span class="line"><span class="regexp">     &lt;dict&gt;  </span></span><br><span class="line"><span class="regexp">          &lt;key&gt;NSAllowsArbitraryLoads&lt;/key</span>&gt;&lt;<span class="literal">true</span>/&gt;  </span><br><span class="line">     &lt;<span class="regexp">/dict&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>为什么使用Mantle</title>
    <url>/2015/10/08/why-mantle/</url>
    <content><![CDATA[<p>项目地址: <a href="https://github.com/Mantle/Mantle" target="_blank" rel="noopener">https://github.com/Mantle/Mantle</a></p>
<p>今年上半年在两个项目中都将Model层替换为Mantle，大大减少了开发中实体转换的时间;选择mantle的初衷是因为看到了大神的blog,里面的应用场景也是在开发中我们经常遇到的情况:<br><a href="http://www.iwangke.me/2014/10/13/Why-Changba-iOS-choose-Mantle/" target="_blank" rel="noopener">iWangKe.me - 为什么唱吧iOS 6.0选择了Mantle</a></p>
<h2 id="对比一下"><a href="#对比一下" class="headerlink" title="对比一下"></a>对比一下</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># http://bubbler.labs.douban.com/j/user/wheats</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"homepage"</span>: <span class="string">"http://www.douban.com/people/wheats"</span>,</span><br><span class="line">  <span class="attr">"icon"</span>: <span class="string">"http://img3.douban.com/icon/u46721592-5.jpg"</span>,</span><br><span class="line">  <span class="attr">"userid"</span>: <span class="string">"46721592"</span>,</span><br><span class="line">  <span class="attr">"r"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"stats"</span>: &#123;</span><br><span class="line">    <span class="attr">"board"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"bub"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"collect"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"welsonla"</span>,</span><br><span class="line">  <span class="attr">"uid"</span>: <span class="string">"wheats"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><img src="http://ww1.sinaimg.cn/large/6e8de9dbjw1ewtvrr4eyjj20gp0eqjvh.jpg" alt></p>
<p><img src="http://ww1.sinaimg.cn/large/6e8de9dbjw1ewtvsjo0s6j20go0f7whk.jpg" alt></p>
<h2 id="You-should-know"><a href="#You-should-know" class="headerlink" title="You should know:"></a>You should know:</h2><ul>
<li>使用Mantle需要继承MTLModel</li>
<li>如果需要将实体中的某个字段映射成一个实体或者实体的数组，需要继承MTLJSONSerializing</li>
<li>Mantle需要一个字典来讲字典中的字段与实体的字段进行匹配</li>
</ul>
<h2 id="将JSON转换为制定的Model"><a href="#将JSON转换为制定的Model" class="headerlink" title="将JSON转换为制定的Model"></a>将JSON转换为制定的Model</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">MDoubanUser *allModel = [MTLJSONAdapter <span class="symbol">modelOfClass:</span>[MDoubanUser <span class="class"><span class="keyword">class</span>] <span class="title">fromJSONDictionary</span>:<span class="title">rstlDict</span>] <span class="title">error</span>:<span class="title">nil</span>]</span></span><br></pre></td></tr></table></figure>
<h2 id="将JSON中的数组转换为Model的数组"><a href="#将JSON中的数组转换为Model的数组" class="headerlink" title="将JSON中的数组转换为Model的数组"></a>将JSON中的数组转换为Model的数组</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">NSArray *users = [MTLJSONAdapter <span class="symbol">modelsOfClass:</span>[MDoubanUser <span class="class"><span class="keyword">class</span>] <span class="title">fromJSONArray</span>:<span class="title">userArray</span> <span class="title">error</span>:<span class="title">nil</span>];</span></span><br></pre></td></tr></table></figure>
<h2 id="将某个字段对应到某个实体"><a href="#将某个字段对应到某个实体" class="headerlink" title="将某个字段对应到某个实体"></a>将某个字段对应到某个实体</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">+(NSValueTransformer *)<span class="symbol">JSONTransformerForKey:</span>(NSString *)key&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ([key <span class="symbol">isEqualToString:</span>@<span class="string">"stats"</span>]) &#123;</span><br><span class="line">      <span class="comment">#假设上诉到json中的stats创建了一个单独的实体类为MStats,</span></span><br><span class="line">      <span class="keyword">return</span> [MTLJSONAdapter <span class="symbol">dictionaryTransformerWithModelClass:</span>[MStats <span class="class"><span class="keyword">class</span>]];</span></span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>([key <span class="symbol">isEqualToString:</span>@<span class="string">"books"</span>])&#123;</span><br><span class="line">      <span class="comment">#假设中json中有一个books数组，并有对应的实体MBook</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">return</span> [MTLJSONAdapter <span class="symbol">arrayTransformerWithModelClass:</span>[MBook <span class="class"><span class="keyword">class</span>]];</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自定义转换"><a href="#自定义转换" class="headerlink" title="自定义转换"></a>自定义转换</h2><p>自定义转换只要定义一个字段名+JSONTransformer结尾的方法，就会执行我们自定义的转换,比如时间格式化，对某些字符进行一些操作处理</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将uid前面加上"Author"</span></span><br><span class="line">+ (NSValueTransformer *)uidJSONTransformer&#123;</span><br><span class="line">    <span class="keyword">return</span> [MTLValueTransformer <span class="symbol">transformerUsingForwardBlock:</span>^id(NSString *uid, BOOL *success, NSError *__autoreleasing *error) &#123;</span><br><span class="line">        <span class="keyword">return</span> [@<span class="string">"Author: "</span> <span class="symbol">stringByAppendingString:</span>uid];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="多个字段对应"><a href="#多个字段对应" class="headerlink" title="多个字段对应"></a>多个字段对应</h2><p>在项目中，经常遇到，接口A返回的用户id字段说uid,接口B返回的用户字段是ID，这种情况我们只需要中Model中将两个字段存到一个数组绑定到同一个属性上就可以了</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">+ (NSDictionary *)JSONKeyPathsByPropertyKey</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> @&#123;</span><br><span class="line">		@<span class="string">"uid"</span><span class="symbol">:</span>@[@<span class="string">"uid"</span>,@<span class="string">"ID"</span>],</span><br><span class="line">		@<span class="string">"userid"</span><span class="symbol">:</span>@<span class="string">"userid"</span>,</span><br><span class="line">		@<span class="string">"stats"</span><span class="symbol">:</span>@<span class="string">"stats"</span>,</span><br><span class="line">		@<span class="string">"title"</span><span class="symbol">:</span>@<span class="string">"title"</span>,</span><br><span class="line">		@<span class="string">"r"</span><span class="symbol">:</span>@<span class="string">"r"</span>,</span><br><span class="line">		@<span class="string">"homepage"</span><span class="symbol">:</span>@<span class="string">"homepage"</span>,</span><br><span class="line">		@<span class="string">"icon"</span><span class="symbol">:</span>@<span class="string">"icon"</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="将实体中的值封装成一个dictionary，方便接口传输"><a href="#将实体中的值封装成一个dictionary，方便接口传输" class="headerlink" title="将实体中的值封装成一个dictionary，方便接口传输"></a>将实体中的值封装成一个dictionary，方便接口传输</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用全部的字段</span></span><br><span class="line">NSDictionary *params = [user dictionaryValue];</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用部分的字段</span></span><br><span class="line">NSDictionary *params = [address <span class="symbol">dictionaryWithValuesForKeys:</span>@[@<span class="string">"uid"</span>,@<span class="string">"stats"</span>,@<span class="string">"homepage"</span>]];</span><br></pre></td></tr></table></figure>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>在项目的开发过程中，我抽时间做了一个小工具，可以方便的将JSON转换为Mantle支持的Model类，希望对你们有帮助</p>
<p>Source: <a href="https://github.com/TimeBots/ModelBot" target="_blank" rel="noopener">https://github.com/TimeBots/ModelBot</a><br>Download: <a href="https://github.com/TimeBots/ModelBot/releases/download/0.3.0/ModelBot.0.3.0.zip" target="_blank" rel="noopener">ModelBot Download</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
  </entry>
  <entry>
    <title>从Objective-c迁移到Swift的一些坑</title>
    <url>/2016/01/27/Objective-c-to-Swift/</url>
    <content><![CDATA[<h3 id="NSString-to-String"><a href="#NSString-to-String" class="headerlink" title="NSString to String"></a>NSString to String</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">#<span class="type">ObjC</span></span><br><span class="line"><span class="type">NSString</span> *notice</span><br><span class="line"></span><br><span class="line">#<span class="type">Swift</span></span><br><span class="line"><span class="keyword">var</span> notice:<span class="type">String?</span></span><br></pre></td></tr></table></figure>
<h3 id="NSArray-NSMutableArray-to-Array"><a href="#NSArray-NSMutableArray-to-Array" class="headerlink" title="NSArray,NSMutableArray to Array"></a>NSArray,NSMutableArray to Array</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">#<span class="number">1</span>. 声明</span><br><span class="line">#<span class="type">ObjC</span></span><br><span class="line"><span class="type">NSMutableArray</span> *listArray = [<span class="type">NSMutableArray</span> array];</span><br><span class="line"></span><br><span class="line">#<span class="type">Swift</span></span><br><span class="line"><span class="keyword">var</span> listArray:[<span class="type">String</span>] = <span class="type">Array</span>() <span class="comment">//必须带参数类型</span></span><br><span class="line"><span class="keyword">var</span> listArray:[<span class="type">AnyObject</span>] = <span class="type">Array</span>()</span><br><span class="line"></span><br><span class="line">#<span class="number">2</span>. 增加元素</span><br><span class="line">#<span class="type">ObjC</span></span><br><span class="line">[listArray addObject:@<span class="string">"foo"</span>];</span><br><span class="line"></span><br><span class="line">#<span class="type">Swift</span></span><br><span class="line">listArray.append(<span class="string">"foo"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="NSRange-gt-Range"><a href="#NSRange-gt-Range" class="headerlink" title="NSRange-&gt;Range"></a>NSRange-&gt;Range</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">#<span class="type">ObjC</span></span><br><span class="line"><span class="type">NSRange</span> range = <span class="type">NSMakeRange</span>(<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">#<span class="type">Swift</span></span><br><span class="line"><span class="type">Range</span>(start: <span class="number">0</span>, end: <span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<h1 id="NSDictionary-NSmutableDictionary-to-Dictionary"><a href="#NSDictionary-NSmutableDictionary-to-Dictionary" class="headerlink" title="NSDictionary,NSmutableDictionary  to Dictionary"></a>NSDictionary,NSmutableDictionary  to Dictionary</h1><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">#<span class="type">ObjC</span></span><br><span class="line"><span class="type">NSMutableDictionary</span> *score = [<span class="type">NSMutableDictionary</span> dictionary];</span><br><span class="line"></span><br><span class="line">#<span class="type">Swift</span></span><br><span class="line"><span class="keyword">var</span> score0:[<span class="type">String</span>:<span class="type">String</span>]?</span><br><span class="line"><span class="keyword">var</span> score1 = [<span class="type">String</span>:<span class="type">String</span>]()</span><br><span class="line"><span class="keyword">var</span> score2 = <span class="type">Dictionary</span>&lt;<span class="type">String</span>,<span class="type">String</span>&gt;()</span><br><span class="line"><span class="keyword">var</span> score3 = [:]</span><br><span class="line"></span><br><span class="line">#<span class="type">ObjC</span></span><br><span class="line"><span class="type">NSDictionary</span> *person = @&#123;@<span class="string">"name"</span>:@<span class="string">"Single Dog"</span>,@<span class="string">"Skill"</span>:@<span class="string">"Swift"</span>&#125;;</span><br><span class="line">person[@“age”] = @“<span class="number">28</span>”;</span><br><span class="line"></span><br><span class="line">#<span class="type">Swift</span></span><br><span class="line"><span class="keyword">var</span> person = [<span class="string">"name"</span>:<span class="string">"Single Dog"</span>,<span class="string">"Skill"</span>:<span class="string">"Swift"</span>]</span><br><span class="line">person[<span class="string">"age"</span>] = <span class="string">"28"</span></span><br></pre></td></tr></table></figure>
<h3 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">#<span class="type">ObjC</span></span><br><span class="line">arc4random%<span class="number">255</span></span><br><span class="line"></span><br><span class="line">#<span class="type">Swift</span></span><br><span class="line">arc4random_uniform(<span class="number">255</span>)</span><br><span class="line">random() % <span class="number">255</span></span><br></pre></td></tr></table></figure>
<h3 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h3><p>感觉Selector的方式不如ObjC那样有方法提示，容易写错，效率反而不如之前<br><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">#<span class="type">ObjC</span></span><br><span class="line"><span class="type">SEL</span> callback = @selector(uploadCallback:)</span><br><span class="line"></span><br><span class="line">#<span class="type">Swift</span></span><br><span class="line"><span class="type">Selector</span>(<span class="string">"uploadCallback:"</span>)</span><br></pre></td></tr></table></figure></p>
<h3 id="id-to-AnyObject"><a href="#id-to-AnyObject" class="headerlink" title="id to AnyObject"></a>id to AnyObject</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">#<span class="type">ObjC</span></span><br><span class="line">id sender</span><br><span class="line"></span><br><span class="line">#<span class="type">Swift</span></span><br><span class="line"><span class="keyword">var</span> sender:<span class="type">Anyobject?</span></span><br><span class="line">```  </span><br><span class="line">### 三元运算缩写</span><br><span class="line">```swift</span><br><span class="line">#<span class="type">ObjC</span></span><br><span class="line">a ? : b</span><br><span class="line"></span><br><span class="line">#<span class="type">Swift</span></span><br><span class="line">a ?? b</span><br></pre></td></tr></table></figure>
<h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">#<span class="type">ObjC</span></span><br><span class="line">typedef <span class="type">NS_ENUM</span>(<span class="type">NSInteger</span>,<span class="type">LocationState</span>)&#123;</span><br><span class="line">    <span class="type">LocationStateStart</span>,</span><br><span class="line">    <span class="type">LocationStateFinish</span>,</span><br><span class="line">    <span class="type">LocationStateFail</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">#<span class="type">Swift</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">LocationState</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">LocationStart</span>, <span class="type">LocationFinish</span>, <span class="type">LocationFail</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Todo-List"><a href="#Todo-List" class="headerlink" title="Todo List"></a>Todo List</h1><ol>
<li>Block to Closure</li>
<li>DateFormatter</li>
<li>nil value check<br>……</li>
</ol>
<p>遇到继续添加,未完待续……</p>
]]></content>
  </entry>
  <entry>
    <title>Mac Tips</title>
    <url>/2016/03/23/Mac-Tips/</url>
    <content><![CDATA[<p>一些常用的命令备忘</p>
<h4 id="显示隐藏文件"><a href="#显示隐藏文件" class="headerlink" title="显示隐藏文件"></a>显示隐藏文件</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.finder AppleShowAllFiles -bool <span class="literal">true</span>;killall Finder</span><br></pre></td></tr></table></figure>
<h4 id="不显示隐藏文件"><a href="#不显示隐藏文件" class="headerlink" title="不显示隐藏文件"></a>不显示隐藏文件</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.finder AppleShowAllFiles -bool <span class="literal">false</span>;killall Finder</span><br></pre></td></tr></table></figure>
<h4 id="10-11后开启第三方硬盘的Trim"><a href="#10-11后开启第三方硬盘的Trim" class="headerlink" title="10.11后开启第三方硬盘的Trim"></a>10.11后开启第三方硬盘的Trim</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sudo trimforce enable</span><br></pre></td></tr></table></figure>
<h4 id="释放不活跃的内存"><a href="#释放不活跃的内存" class="headerlink" title="释放不活跃的内存"></a>释放不活跃的内存</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sudo purge</span><br></pre></td></tr></table></figure>
<h4 id="允许任何来源的软件进行安装"><a href="#允许任何来源的软件进行安装" class="headerlink" title="允许任何来源的软件进行安装"></a>允许任何来源的软件进行安装</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sudo spctl --master-disable</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>iOS</category>
      </categories>
  </entry>
  <entry>
    <title>2016年2月29日</title>
    <url>/2016/02/29/the-day-of-2-29/</url>
    <content><![CDATA[<p>仅为今天，特意发博一篇</p>
]]></content>
  </entry>
  <entry>
    <title>iOS Tips</title>
    <url>/2016/03/23/iOS-Tips/</url>
    <content><![CDATA[<p>Code Snippets</p>
<h5 id="去除空白TableViewCell的分割线"><a href="#去除空白TableViewCell的分割线" class="headerlink" title="去除空白TableViewCell的分割线"></a>去除空白TableViewCell的分割线</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">listTable.tableFooterView = [UIView <span class="keyword">new</span>];</span><br></pre></td></tr></table></figure>
<h5 id="让header与cell一起滚动，不在顶部悬停"><a href="#让header与cell一起滚动，不在顶部悬停" class="headerlink" title="让header与cell一起滚动，不在顶部悬停"></a>让header与cell一起滚动，不在顶部悬停</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">设置为UITableViewStyleGrouped</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h5 id="在拼音打字的时候，不让textField响应Change"><a href="#在拼音打字的时候，不让textField响应Change" class="headerlink" title="在拼音打字的时候，不让textField响应Change"></a>在拼音打字的时候，不让textField响应Change</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//MARK: textfield notification</span></span><br><span class="line">- (<span class="keyword">void</span>)textFieldDidChange:(NSNotification *)notification&#123;</span><br><span class="line">   UITextRange *selectedRange = [self.searchField markedTextRange];</span><br><span class="line">   NSString * newText = [self.textField textInRange:selectedRange];</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取高亮部分,拼音状态不进行搜索</span></span><br><span class="line">   <span class="keyword">if</span>(newText.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="将数组中的Model的某个字段合并成String"><a href="#将数组中的Model的某个字段合并成String" class="headerlink" title="将数组中的Model的某个字段合并成String"></a>将数组中的Model的某个字段合并成String</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#假设listArray中是User实体，有一个Name字段</span><br><span class="line">[[listArray valueForKey:@“Name”] componentsJoinedByString:@<span class="string">"\n"</span>]</span><br></pre></td></tr></table></figure>
<h5 id="设置NavigationBarItem的Title，可以让其与Tabbar的Title区分开"><a href="#设置NavigationBarItem的Title，可以让其与Tabbar的Title区分开" class="headerlink" title="设置NavigationBarItem的Title，可以让其与Tabbar的Title区分开"></a>设置NavigationBarItem的Title，可以让其与Tabbar的Title区分开</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">self.navigationItem.title = @“Home”;</span><br></pre></td></tr></table></figure>
<h5 id="通过设置Cell的Custom-Insets来替代自定义View的分割线"><a href="#通过设置Cell的Custom-Insets来替代自定义View的分割线" class="headerlink" title="通过设置Cell的Custom Insets来替代自定义View的分割线"></a>通过设置Cell的Custom Insets来替代自定义View的分割线</h5><p><img src="/uploads/cell-insets.png" alt></p>
<h3 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a>Xcode</h3><ol>
<li>按住Shift可以一次选择多个AutoLayout约束</li>
<li>按住Ctrl,再点按Alt可以Toggle设置是否添加Margin</li>
<li>Ctrl+Command+↑切换h与m文件（Objective-C使用）</li>
<li>给类改名，并修改相关引用地方的类名<br><img src="/uploads/xcode-rename.png" alt></li>
</ol>
<p><img src="/uploads/xcode-rename-relation.png" alt></p>
<h4 id="屏蔽Xcode8自带log"><a href="#屏蔽Xcode8自带log" class="headerlink" title="屏蔽Xcode8自带log"></a>屏蔽Xcode8自带log</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">[<span class="symbol">http:</span>/<span class="regexp">/stackoverflow.com/questions</span><span class="regexp">/37800790/hide</span>-strange-unwanted-xcode-<span class="number">8</span>-logs](<span class="symbol">http:</span>/<span class="regexp">/stackoverflow.com/questions</span><span class="regexp">/37800790/hide</span>-strange-unwanted-xcode-<span class="number">8</span>-logs)</span><br><span class="line"><span class="number">1</span>- From Xcode menu <span class="symbol">open:</span> Product &gt; Scheme &gt; Edit Scheme</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>- On your Environment Variables set OS_ACTIVITY_MODE = disable</span><br></pre></td></tr></table></figure>
<h3 id="Xcode8-注释快捷键"><a href="#Xcode8-注释快捷键" class="headerlink" title="Xcode8 注释快捷键"></a>Xcode8 注释快捷键</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Option+Command+<span class="regexp">/</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
  </entry>
  <entry>
    <title>配置多个SSH Keygen</title>
    <url>/2016/12/08/multiple-ssh-key-config/</url>
    <content><![CDATA[<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"YourMail@github.com"</span> -f ~<span class="regexp">/.ssh/github</span>_rsa</span><br></pre></td></tr></table></figure>
<h2 id="添加到私钥列表"><a href="#添加到私钥列表" class="headerlink" title="添加到私钥列表"></a>添加到私钥列表</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">ssh-add ~<span class="regexp">/.ssh/id</span>_rsa</span><br><span class="line">ssh-add ~<span class="regexp">/.ssh/github</span>_rsa</span><br></pre></td></tr></table></figure>
<h2 id="查看私钥列表"><a href="#查看私钥列表" class="headerlink" title="查看私钥列表"></a>查看私钥列表</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以通过 ssh-add -l 来确私钥列表</span></span><br><span class="line">ssh-add -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过 ssh-add -D 来清空私钥列表</span></span><br><span class="line">ssh-add -D</span><br></pre></td></tr></table></figure>
<h2 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">cd ~<span class="regexp">/.ssh</span></span><br><span class="line"><span class="regexp">touch config</span></span><br></pre></td></tr></table></figure>
<h2 id="添加配置内容"><a href="#添加配置内容" class="headerlink" title="添加配置内容"></a>添加配置内容</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    PreferredAuthentications publickey <span class="comment">#认证类型为私钥</span></span><br><span class="line">    IdentityFile ~<span class="regexp">/.ssh/github</span>_rsa</span><br></pre></td></tr></table></figure>
<h2 id="添加github-rsa-pub内容到github的SSH-KEY列表"><a href="#添加github-rsa-pub内容到github的SSH-KEY列表" class="headerlink" title="添加github_rsa.pub内容到github的SSH KEY列表"></a>添加github_rsa.pub内容到github的SSH KEY列表</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">cat ~<span class="regexp">/.ssh/github</span>_rsa.pub</span><br></pre></td></tr></table></figure>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">⇒  ssh -T git@github.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 会提示， 说明已经配置成功</span></span><br><span class="line">Hi welsonla! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://my.oschina.net/stefanzhlg/blog/529403" target="_blank" rel="noopener">https://my.oschina.net/stefanzhlg/blog/529403</a><br><a href="http://riny.net/2014/git-ssh-key/" target="_blank" rel="noopener">http://riny.net/2014/git-ssh-key/</a></p>
]]></content>
  </entry>
  <entry>
    <title>heroku command</title>
    <url>/2017/07/13/heroku-command/</url>
    <content><![CDATA[<p>记录一些经常使用到的一些heroku管理命令</p>
<h1 id="login"><a href="#login" class="headerlink" title="login"></a>login</h1><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">heroku login</span></span><br></pre></td></tr></table></figure>
<h1 id="show-apps-info"><a href="#show-apps-info" class="headerlink" title="show apps info"></a>show apps info</h1><p>展示你app的一些信息<br><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">heroku</span> apps:<span class="literal">info</span></span><br></pre></td></tr></table></figure></p>
<h1 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h1><p>推送代码并部署<br><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">push </span>heroku  master</span><br></pre></td></tr></table></figure></p>
<h1 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h1><p>远程到你app目录项目，可以操作远程的一些文件，相当于ssh登录<br><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">heroku <span class="keyword">run</span><span class="bash"> bash</span></span><br></pre></td></tr></table></figure></p>
<h1 id="log"><a href="#log" class="headerlink" title="log"></a>log</h1><p>查看实时输出的log<br><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">heroku logs -t</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>工具控</category>
      </categories>
  </entry>
  <entry>
    <title>使用Fastlane</title>
    <url>/2017/07/13/using-fastlane/</url>
    <content><![CDATA[<h2 id="相关介绍"><a href="#相关介绍" class="headerlink" title="相关介绍"></a>相关介绍</h2><p>Fastlane最初由KrauseFx(<a href="https://github.com/KrauseFx" target="_blank" rel="noopener">Github</a>, <a href="https://twitter.com/krausefx" target="_blank" rel="noopener">Twitter</a>) 发起，现在已经有百位代码和插件贡献者，丰富的Action与Plugin可以满足众多个性化的需求，目前官方主要的工具如下(来自fastlane项目Github页面), 但不仅限于此。</p>
<p><img src="/uploads/WX20170525-112539.png" alt></p>
<h2 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h2><p><a href="https://github.com/fastlane/fastlane" target="_blank" rel="noopener">Github主页</a><br><a href="https://rubygems.org/gems/fastlane" target="_blank" rel="noopener">Gem主页</a><br><a href="https://docs.fastlane.tools/" target="_blank" rel="noopener">官方文档</a></p>
<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>Fastlane是用ruby写的一套程序，最简单的方式是使用gem的方式来安装<br><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">gem <span class="keyword">install</span> fastlane</span><br></pre></td></tr></table></figure></p>
<h2 id="初始化你的项目"><a href="#初始化你的项目" class="headerlink" title="初始化你的项目"></a>初始化你的项目</h2><p>创建Gemfile主要是为了让其他人安装的Gem保持统一，Cocoapods之后也可以用Gemfile来做统一的管理<br><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">bundle</span> <span class="string">init</span></span><br><span class="line"><span class="attr">echo</span> <span class="string">'gem "fastlane"' &gt;&gt; Gemfile</span></span><br><span class="line"><span class="attr">bundle</span> <span class="string">install</span></span><br></pre></td></tr></table></figure></p>
<h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><p>init期间会让你输入AppleID，如果该应用存在，Fastlane会通过iTunesConnect拉取应用的metadata和所有的App截图，如果不存在，会提示你是否在iTunesConnect中创建一个新的App<br><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">fastlane init</span></span><br></pre></td></tr></table></figure></p>
<p>安装完之后，会在项目中产生一个fastlane目录，使用<code>tree</code>命令查看结构如下<br><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">├── Appfile</span><br><span class="line">├── Deliverfile</span><br><span class="line">├── Fastfile</span><br><span class="line">├── <span class="module-access"><span class="module"><span class="identifier">README</span>.</span></span>md</span><br><span class="line">├── metadata</span><br><span class="line">│   ├── some metadata file ...</span><br><span class="line">├── report.xml</span><br><span class="line">└── screenshots</span><br><span class="line">    └── <span class="module-access"><span class="module"><span class="identifier">README</span>.</span></span>txt</span><br></pre></td></tr></table></figure></p>
<p><strong>Appfile</strong> 记录了你appid，apple id，team id等信息<br><strong>Deliverfile</strong> 记录了bundle与appleid信息<br><strong>Fastfile</strong> 是我们打包使用到的主要文件，这里面可以自定义你的流程<br><strong>metadata</strong> 是通过iTunesConnect获取到的app的信息文件，包括介绍<br><strong>screenshots</strong> 保存了所有的截图信息</p>
<h2 id="一个简单的Fastfile流程"><a href="#一个简单的Fastfile流程" class="headerlink" title="一个简单的Fastfile流程"></a>一个简单的Fastfile流程</h2><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">lane :beta do</span><br><span class="line">  git_pull</span><br><span class="line">  increment_build_number 				<span class="meta">#build number更新</span></span><br><span class="line">	cocoapods 							<span class="meta">#安装cocoapods </span></span><br><span class="line">     gym(</span><br><span class="line"><span class="symbol">       scheme:</span> <span class="string">"MyScheme"</span>,          <span class="meta">#主Target</span></span><br><span class="line"><span class="symbol">       output_directory:</span><span class="string">"./build"</span>,  <span class="meta">#导出目录</span></span><br><span class="line"><span class="symbol">       export_method:</span> <span class="string">"development"</span> <span class="meta">#导出方式</span></span><br><span class="line">    )</span><br><span class="line">	  sh <span class="string">"./customScript.sh"</span> 			<span class="meta">#执行你的脚本文件或Shell命令</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>更多关于gym的配置参数，可以参见 <a href="https://docs.fastlane.tools/actions/#gym" target="_blank" rel="noopener">Actions - fastlane docs</a></p>
<p><strong>每个Action下面都有Example和Parameters，默认是收起状态</strong> </p>
<p><img src="/uploads/WX20170605-134929.png" alt></p>
<p> 通过执行<code>fastlane beta</code> 就可以进行打包，并且<code>dYSM</code>和<code>ipa</code>文件会导出到我们指定的项目下的<code>build</code>目录下面<br><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">fastlane beta</span></span><br></pre></td></tr></table></figure></p>
<h3 id="fastlane文件结构"><a href="#fastlane文件结构" class="headerlink" title="fastlane文件结构"></a>fastlane文件结构</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">fastlane_version <span class="string">"2.44.1"</span></span><br><span class="line"></span><br><span class="line">default_platform <span class="symbol">:ios</span></span><br><span class="line"></span><br><span class="line">platform <span class="symbol">:ios</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#1. 开始前的一些操作，如代码更新(git_pull)</span></span><br><span class="line">  before_all <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">#2. 打包一个测试版本</span></span><br><span class="line">  desc <span class="string">"build a beta version"</span></span><br><span class="line">  lane <span class="symbol">:beta</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">    gym(</span><br><span class="line">      <span class="symbol">export_method:</span> <span class="string">"ad-hoc"</span>,</span><br><span class="line">      <span class="symbol">output_directory:</span> <span class="string">"./build"</span>,</span><br><span class="line">    ) </span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#3. 打包一个线上版本，并上传</span></span><br><span class="line">  lane <span class="symbol">:release</span> <span class="keyword">do</span></span><br><span class="line">    gym(</span><br><span class="line">     	<span class="symbol">export_method:</span> <span class="string">"app-store"</span></span><br><span class="line">    )</span><br><span class="line">    deliver(<span class="symbol">force:</span> <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#4.打包结束操作</span></span><br><span class="line">  after_all <span class="keyword">do</span> <span class="params">|lane|</span></span><br><span class="line">  	<span class="comment">#打开导出目录</span></span><br><span class="line">	sh <span class="string">"open ./build"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#5. 捕获错误</span></span><br><span class="line">  error <span class="keyword">do</span> <span class="params">|lane, exception|</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h2 id="一些常用命令"><a href="#一些常用命令" class="headerlink" title="一些常用命令"></a>一些常用命令</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出现有的所有action</span></span><br><span class="line"><span class="attr">fastlane</span> <span class="string">actions</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有lane任务</span></span><br><span class="line"><span class="attr">fastlane</span> <span class="string">list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个新的Action</span></span><br><span class="line"><span class="attr">fastlane</span> <span class="string">new_action</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印环境变量，Fastfile中可以`ENV['PWD']`使用这些变量</span></span><br><span class="line"><span class="attr">fastlane</span> <span class="string">env</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示本机Provision文件</span></span><br><span class="line"><span class="attr">security</span> <span class="string">find-identity -v -p codesigning</span></span><br></pre></td></tr></table></figure>
<h2 id="常见问题可以参见或官方issues"><a href="#常见问题可以参见或官方issues" class="headerlink" title="常见问题可以参见或官方issues"></a>常见问题可以参见或官方issues</h2><p><a href="https://docs.fastlane.tools/codesigning/troubleshooting/" target="_blank" rel="noopener">https://docs.fastlane.tools/codesigning/troubleshooting/</a><br><a href="https://github.com/fastlane/fastlane/issues" target="_blank" rel="noopener">Issues · fastlane/fastlane · GitHub</a></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://github.com/fastlane/fastlane" target="_blank" rel="noopener">Fastlane</a><br><a href="https://rubygems.org/gems/fastlane" target="_blank" rel="noopener">Fastlane对应的Gem主页</a><br><a href="https://docs.fastlane.tools/" target="_blank" rel="noopener">Fastlane官方文档</a><br><a href="http://www.jianshu.com/p/1aebb0854c78" target="_blank" rel="noopener">Fastlane实战（一）：移动开发自动化之道</a><br><a href="http://www.jianshu.com/p/0520192c9bd7" target="_blank" rel="noopener">Fastlane实战（二）：Action和Plugin机制</a><br><a href="http://www.jianshu.com/p/faae6f95cbd8" target="_blank" rel="noopener">Fastlane实战（五）：高级用法</a><br><a href="https://docs.fastlane.tools/actions/#building" target="_blank" rel="noopener">fastlane actions</a><br><a href="https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Advanced.md" target="_blank" rel="noopener">Advanced fastlane</a>  </p>
]]></content>
      <categories>
        <category>自动化</category>
      </categories>
  </entry>
  <entry>
    <title>Xcode BuildNumber 自动更新</title>
    <url>/2017/08/10/Xcode-buildid-autoincrement/</url>
    <content><![CDATA[<p>最近为了区分发包的id，从晚上找了一段代码<br>原理就是，先用PlistBuddy获取当前的buildid，之后+1，然后再更新plist文件<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">buildNumber=$(/usr/libexec/PlistBuddy -c <span class="string">"Print CFBundleVersion"</span> <span class="string">"$&#123;PROJECT_DIR&#125;/$&#123;INFOPLIST_FILE&#125;"</span>)</span><br><span class="line">buildNumber=$(($buildNumber + <span class="number">1</span>))</span><br><span class="line">/usr/libexec/PlistBuddy -c <span class="string">"Set :CFBundleVersion $buildNumber"</span> <span class="string">"$&#123;PROJECT_DIR&#125;/$&#123;INFOPLIST_FILE&#125;"</span></span><br></pre></td></tr></table></figure></p>
<p>From: <a href="https://gist.github.com/sekati/3172554" target="_blank" rel="noopener">https://gist.github.com/sekati/3172554</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
  </entry>
  <entry>
    <title>iTerm2 with powerline theme</title>
    <url>/2019/06/13/iterm-with-powerline-theme/</url>
    <content><![CDATA[<h3 id="确保已经安装了oh-my-zsh"><a href="#确保已经安装了oh-my-zsh" class="headerlink" title="确保已经安装了oh-my-zsh"></a>确保已经安装了oh-my-zsh</h3><p><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh</a></p>
<h3 id="安装-oh-my-zsh-powerline-theme"><a href="#安装-oh-my-zsh-powerline-theme" class="headerlink" title="安装 oh-my-zsh-powerline-theme"></a>安装 oh-my-zsh-powerline-theme</h3><p><a href="https://github.com/jeremyFreeAgent/oh-my-zsh-powerline-theme" target="_blank" rel="noopener">https://github.com/jeremyFreeAgent/oh-my-zsh-powerline-theme</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/.oh-my-zsh/themes</span><br><span class="line">git clone git@github.com:jeremyFreeAgent/oh-my-zsh-powerline-theme.git</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">更新submodule,进行powerline-fonts安装</span></span><br><span class="line">cd oh-my-zsh-powerline-theme</span><br><span class="line">git submodule init</span><br><span class="line">git submodule update</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">安装</span></span><br><span class="line">./install_in_omz.sh</span><br></pre></td></tr></table></figure>
<h3 id="更改iterm字体"><a href="#更改iterm字体" class="headerlink" title="更改iterm字体"></a>更改iterm字体</h3><p>iTerm2 – Preferences – Profiles – Text<br>找到Font，点击Change Font，将字体改为<code>Fira mono for powerline</code>, 字号14pt</p>
<h3 id="修改zsh配置"><a href="#修改zsh配置" class="headerlink" title="修改zsh配置"></a>修改zsh配置</h3><p>打开<code>~/.zshrc</code>文件，修改<code>ZSH_THEME&quot;</code>为<code>powerline</code></p>
<p>添加如下配置<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">POWERLINE_RIGHT_B=""  </span><br><span class="line">POWERLINE_RIGHT_A="date"  </span><br><span class="line">POWERLINE_RIGHT_A_COLOR_FRONT="black"  </span><br><span class="line">POWERLINE_RIGHT_A_COLOR_BACK="red"  </span><br><span class="line">POWERLINE_HIDE_HOST_NAME="true"</span><br><span class="line">POWERLINE_PATH="short"</span><br><span class="line">POWERLINE_SHORT_HOST_NAME="true"</span><br><span class="line">POWERLINE_DETECT_SSH="true"</span><br><span class="line">POWERLINE_GIT_CLEAN="✔"</span><br><span class="line">POWERLINE_GIT_DIRTY="✘"</span><br><span class="line">POWERLINE_GIT_ADDED="%F&#123;green&#125;✚%F&#123;black&#125;"</span><br><span class="line">POWERLINE_GIT_MODIFIED="%F&#123;blue&#125;✹%F&#123;black&#125;"</span><br><span class="line">POWERLINE_GIT_DELETED="%F&#123;red&#125;✖%F&#123;black&#125;"</span><br><span class="line">POWERLINE_GIT_UNTRACKED="%F&#123;yellow&#125;✭%F&#123;black&#125;"</span><br><span class="line">POWERLINE_GIT_RENAMED="➜"</span><br><span class="line">POWERLINE_GIT_UNMERGED="═"</span><br></pre></td></tr></table></figure></p>
<h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><p><img src="/uploads/powerline.png" alt="/uploads/powerline.png"></p>
]]></content>
      <categories>
        <category>工具控</category>
      </categories>
  </entry>
  <entry>
    <title>将 ReactNative 的默认终端改为 iTerm2</title>
    <url>/2018/05/30/let-react-native-shell-open-in-iterm/</url>
    <content><![CDATA[<p>自己平时使用iTerm2作为主力的终端，ReactNative的默认打开终端是系统自带的Terminal，这样就会经常存在同时开启两个终端软件的情况，搜索了一下，解决方式很简单</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> node_modules/react-<span class="keyword">native</span>/scripts</span><br></pre></td></tr></table></figure>
<p> 选中<code>launchPackager.command</code>,右键切换它的默认打开工具</p>
<p> <img src="/uploads/react-native-open-shell.png" alt></p>
<h5 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h5><p> <a href="https://stackoverflow.com/questions/37814803/how-to-get-react-native-run-ios-to-open-in-iterm-instead-of-terminal-on-a-macos" target="_blank" rel="noopener">https://stackoverflow.com/questions/37814803/how-to-get-react-native-run-ios-to-open-in-iterm-instead-of-terminal-on-a-macos</a></p>
]]></content>
  </entry>
  <entry>
    <title>解决 Mac OS 删除文件后磁盘空间不更新的问题</title>
    <url>/2020/01/01/Mac-Diskspace-release/</url>
    <content><![CDATA[<p>这个问题存在了很久，一直也没有找到解决的办法，今天上网查询后发现，这个问题只存在于使用了Time Machine的用户，原因是因为Time Machine的快照自动生成造成的，于是试着按照解决方法查询了下本地快照</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> tmutil listlocalsnapshots /</span><br></pre></td></tr></table></figure>
<p>得到如下结果,确实Mac在自动的生成系统的快照<br><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">com.apple.TimeMachine<span class="number">.2019</span><span class="number">-12</span><span class="number">-31</span><span class="number">-214148.</span>local</span><br><span class="line">com.apple.TimeMachine<span class="number">.2019</span><span class="number">-12</span><span class="number">-31</span><span class="number">-223649.</span>local</span><br><span class="line">com.apple.TimeMachine<span class="number">.2020</span><span class="number">-01</span><span class="number">-01</span><span class="number">-103649.</span>local</span><br><span class="line">com.apple.TimeMachine<span class="number">.2020</span><span class="number">-01</span><span class="number">-01</span><span class="number">-113743.</span>local</span><br><span class="line">com.apple.TimeMachine<span class="number">.2020</span><span class="number">-01</span><span class="number">-01</span><span class="number">-124353.</span>local</span><br><span class="line">com.apple.TimeMachine<span class="number">.2020</span><span class="number">-01</span><span class="number">-01</span><span class="number">-143927.</span>local</span><br><span class="line">com.apple.TimeMachine<span class="number">.2020</span><span class="number">-01</span><span class="number">-01</span><span class="number">-153651.</span>local</span><br></pre></td></tr></table></figure></p>
<p>试着删除其中的一个快照<br><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">tmutil deletelocalsnapshots <span class="number">2019</span><span class="number">-12</span><span class="number">-31</span><span class="number">-214148</span></span><br></pre></td></tr></table></figure></p>
<p>发现系统的空间立刻就释放了，猜测就是以为Time Machine的快照自动生成导致的，不知道是Mac系统的bug还是因为备份的策略,  试着写了一个Ruby的脚本来自动的删除这些快照，希望对遇到此问题的人有帮助:</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#diskspace info</span></span><br><span class="line">puts <span class="string">"Current Diskspace info:"</span> </span><br><span class="line">puts <span class="string">"---------"</span></span><br><span class="line">puts <span class="string">%x[df -lh /]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#list localsnapshots</span></span><br><span class="line">puts <span class="string">"\n\n---------"</span></span><br><span class="line">list = <span class="string">%x[tmutil listlocalsnapshots /]</span></span><br><span class="line">puts list</span><br><span class="line"></span><br><span class="line"><span class="comment">#delete snapshots</span></span><br><span class="line">puts <span class="string">"\n\n---------"</span></span><br><span class="line">puts <span class="string">"Start delete snapshots:"</span></span><br><span class="line">matches = list.scan(<span class="regexp">/\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;-\d&#123;6&#125;/</span>)</span><br><span class="line">matches.each_with_index&#123;<span class="params">|snapshoot,index|</span></span><br><span class="line">    puts <span class="string">"delete the listlocalsnapshots <span class="subst">#&#123;snapshoot&#125;</span>"</span></span><br><span class="line">    sh = <span class="string">"tmutil deletelocalsnapshots <span class="subst">#&#123;snapshoot&#125;</span>"</span></span><br><span class="line">    system(sh)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#diskspace info after delete snapshot</span></span><br><span class="line">puts puts <span class="string">"\n\n---------"</span></span><br><span class="line">puts <span class="string">"Diskspace info after delete snapshots:"</span></span><br><span class="line">puts <span class="string">%x[df -lh /]</span></span><br></pre></td></tr></table></figure>
<p>将上面脚本保存为snapshots_clear.rb,或从我保存的gist上<a href="https://gist.github.com/welsonla/0e4c4a818abfae0400a4087b54e81c43" target="_blank" rel="noopener">下载</a><br>执行. </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ruby snapshots_clear.rb</span><br></pre></td></tr></table></figure>
<h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h5><p><a href="http://nb.zol.com.cn/671/6715453.html" target="_blank" rel="noopener">Mac瘦身技巧 删除文件后可用空间还变少了？</a><br><a href="https://forums.macrumors.com/threads/solution-reclaim-storage-back-from-system.2073174/" target="_blank" rel="noopener">Solution: Reclaim storage back from “System”</a></p>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
  </entry>
  <entry>
    <title>Mac OS 安装 配置Laravel开发环境</title>
    <url>/2020/01/01/composer-and-laravel-setup/</url>
    <content><![CDATA[<h3 id="使用Homebrew安装PHP-7-3"><a href="#使用Homebrew安装PHP-7-3" class="headerlink" title="使用Homebrew安装PHP 7.3"></a>使用Homebrew安装PHP 7.3</h3><p>实用brew的好处就是PHP版本可以不被系统升级而改变，从而保证升级系统不会影响PHP环境<br><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">brew install <span class="symbol">php@</span><span class="number">7.3</span></span><br><span class="line">brew link <span class="symbol">php@</span><span class="number">7.3</span></span><br></pre></td></tr></table></figure></p>
<h3 id="安装Composer"><a href="#安装Composer" class="headerlink" title="安装Composer"></a>安装Composer</h3><figure class="highlight scilab"><table><tr><td class="code"><pre><span class="line">wget https:<span class="comment">//getcomposer.org/installer</span></span><br><span class="line">php -r <span class="string">"copy('</span>https:<span class="comment">//getcomposer.org/installer', 'composer-setup.php');"</span></span><br><span class="line">php -r <span class="string">"if (hash_file('</span>sha384', <span class="string">'composer-setup.php'</span>) === <span class="string">'baf1608c33254d00611ac1705c1d9958c817a1a33bce370c0595974b342601bd80b92a3f46067da89e3b06bff421f182'</span>) &#123; echo <span class="string">'Installer verified'</span>; &#125; <span class="keyword">else</span> &#123; echo <span class="string">'Installer corrupt'</span>; unlink(<span class="string">'composer-setup.php'</span>); &#125; echo PHP_EOL;<span class="string">"</span></span><br><span class="line"><span class="string">php composer-setup.php</span></span><br><span class="line"><span class="string">php -r "</span>unlink(<span class="string">'composer-setup.php'</span>);<span class="string">"</span></span><br></pre></td></tr></table></figure>
<h3 id="添加到全局"><a href="#添加到全局" class="headerlink" title="添加到全局"></a>添加到全局</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mv composer.phar <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>composer</span><br></pre></td></tr></table></figure>
<h3 id="设置国内镜像"><a href="#设置国内镜像" class="headerlink" title="设置国内镜像"></a>设置国内镜像</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">composer <span class="built_in">config</span> -g repo.packagist composer https:<span class="comment">//mirrors.aliyun.com/composer/</span></span><br></pre></td></tr></table></figure>
<h3 id="安装Composer多线程下载支持"><a href="#安装Composer多线程下载支持" class="headerlink" title="安装Composer多线程下载支持"></a>安装Composer多线程下载支持</h3><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">composer</span> <span class="meta">global</span> <span class="meta">require</span> hirak/prestissimo</span><br></pre></td></tr></table></figure>
<h3 id="安装laravel"><a href="#安装laravel" class="headerlink" title="安装laravel"></a>安装laravel</h3><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">composer</span> <span class="meta">global</span> <span class="meta">require</span> laravel/installer</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title>Blog迁移到了Hexo</title>
    <url>/2015/10/10/start-using-hexo/</url>
    <content><![CDATA[<h2 id="Octopress的痛点"><a href="#Octopress的痛点" class="headerlink" title="Octopress的痛点"></a>Octopress的痛点</h2><p>受不了<code>_deploy</code>文件夹的折磨，以及AutoGenerate Disable这错误导致生成问题，rake deploy靠运气成功,今天将blog迁移到了hexo</p>
<h2 id="Hexo优点"><a href="#Hexo优点" class="headerlink" title="Hexo优点"></a>Hexo优点</h2><ol>
<li><p>更简洁的语法</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">"title"</span></span><br><span class="line">hexo new page</span><br><span class="line">hexo g <span class="comment">#生成</span></span><br><span class="line">hexo d <span class="comment">#部署</span></span><br><span class="line">hexo s <span class="comment">#运行</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>更快的生成速度</p>
</li>
<li><p>直观的部署结果</p>
</li>
</ol>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li><p>安装Node  </p>
<p> 参考node官方 <a href="https://nodejs.org" target="_blank" rel="noopener">https://nodejs.org</a></p>
</li>
</ol>
<ol start="2">
<li><p>安装hexo以及用到的东西  </p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建Blog  </p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装Server</span></span><br><span class="line">npm install hexo-server --save</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>创建文章<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">"first blog"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建独立页面</span></span><br><span class="line">hexo new page <span class="string">"about"</span></span><br></pre></td></tr></table></figure></p>
<p>预备部署<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加github部署支持</span></span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 修改_config.yml  </span></span><br><span class="line"><span class="symbol">deploy:</span></span><br><span class="line">  <span class="symbol">type:</span> git <span class="comment">#不要再使用github作为type</span></span><br><span class="line">  <span class="symbol">repo:</span> git@github.<span class="symbol">com:</span>&lt;yourname&gt;<span class="regexp">/&lt;yourname&gt;.github.io.git</span></span><br><span class="line"><span class="regexp">  branch: master</span></span><br></pre></td></tr></table></figure></p>
<h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><h3 id="安装主题，推荐Next-有详细的安装文档"><a href="#安装主题，推荐Next-有详细的安装文档" class="headerlink" title="安装主题，推荐Next, 有详细的安装文档"></a>安装主题，推荐Next, 有详细的安装文档</h3><h5 id="安装参考"><a href="#安装参考" class="headerlink" title="安装参考"></a>安装参考</h5><p><a href="http://theme-next.iissnan.com/five-minutes-setup.html" target="_blank" rel="noopener">http://theme-next.iissnan.com/five-minutes-setup.html</a></p>
<h5 id="详细的配置"><a href="#详细的配置" class="headerlink" title="详细的配置"></a>详细的配置</h5><p><a href="https://github.com/iissnan/hexo-theme-next/wiki/主题配置参考" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next/wiki/主题配置参考</a></p>
<h3 id="添加RSS"><a href="#添加RSS" class="headerlink" title="添加RSS"></a>添加RSS</h3><p><a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener"></a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>
<h3 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">放到./source/uploads文件夹下，代码中使用</span><br><span class="line">![](<span class="regexp">/uploads/</span>xxx.png)</span><br></pre></td></tr></table></figure>
<h3 id="修改生成文件的格式"><a href="#修改生成文件的格式" class="headerlink" title="修改生成文件的格式"></a>修改生成文件的格式</h3><p>修改为Year-Month-Day-title样式，方便查找<br>打开<code>_config.yml</code><br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">new_post_name: :year-:month-:day-:title.md</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>something</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2015/10/10/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>something</category>
      </categories>
  </entry>
  <entry>
    <title>使用阿里云加速Maven包更新</title>
    <url>/2020/11/28/speed-up-maven/</url>
    <content><![CDATA[<p>阿里云maven镜像官方地址: <a href="https://maven.aliyun.com/mvn/guide" target="_blank" rel="noopener">https://maven.aliyun.com/mvn/guide</a></p>
<p>mac用户首先建立 <code>~/.m2/settings.conf</code> 文件，然后将阿里云的Maven配置写入到文件, 然后重新加载maven配置即可, 完整配置如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">                      https://maven.apache.org/xsd/settings-1.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://developer.aliyun.com/article/78124" target="_blank" rel="noopener">https://developer.aliyun.com/article/78124</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hello, Nuphy Halo 65</title>
    <url>/2022/11/28/Hello-Nuphy-Halo-65/</url>
    <content><![CDATA[<p><img src="/uploads/Halo65.jpg" alt="Halo65"></p>
<h3 id="购买理由"><a href="#购买理由" class="headerlink" title="购买理由"></a>购买理由</h3><p>很早就关注了Halo 65 这款键盘，一是因为颜值确实比较喜欢，其次是<code>三模</code>，支持蓝牙、2.4G与有线三种连接模式，只是一直没有在国内上市，双十一的时候发现淘宝居然上架了Halo 65，轴体比海外版本要少，据说轴也不太一样，因为之前比较习惯使用红轴键盘，所以轴体选择的<code>簌簌晚风轴</code>， 线性轴体，没有段落感，也没有青轴那么吵闹。</p>
<h3 id="拆箱与配件"><a href="#拆箱与配件" class="headerlink" title="拆箱与配件"></a>拆箱与配件</h3><p>等了两天就收到了顺丰寄来的快递，快递包裹很厚，拆开意外的发现店铺还额外赠送了一套黑色的键帽，算是一份意外的惊喜</p>
<p>外包装袋上还有二次元的形象印刷，打开盒子，发现还有几张键盘定制的二次元贴纸，然后是键盘防尘罩，键盘主体，侧面有一个Type-C数据线接口，一个开关键、还有一个2.4G的接受器插在侧面<br>还有一个配件包装盒子,包含：</p>
<ul>
<li>黑、红、绿、白集中体验轴体， </li>
<li>几个替换的其他颜色的键帽</li>
<li>一个拔轴拔键器</li>
<li>一条Type-C接口的键盘数据线</li>
</ul>
<p><img src="/uploads/caps.jpg" alt="配件与赠送的键帽"></p>
<p>键盘第一感觉就是重，键盘上盖板是金属材质，腰下下部为塑料材质，整体感觉比之前我那把HHKB要重不少。</p>
<p>因为Halo 65官网的说明书比较难找，附带的说明书也记录的不太清楚，导致第一天一直没有找到如何开启蓝牙配对，一直使用的是2.4G来连接，体验下来感觉轴体比之前使用的红轴手感略重，但是按键的触感很不错，声音听着也很舒服，Nuphy为Halo 65都配置了隐声空格键，使空格键的敲击没有了弹簧音，减少了敲击空格键的噪音，算是一个不错的设计。</p>
<p><img src="/uploads/keyboard-halo65.JPG" alt="键盘一览"></p>
<h3 id="常用键盘快捷键"><a href="#常用键盘快捷键" class="headerlink" title="常用键盘快捷键"></a>常用键盘快捷键</h3><p>记录一下Halo 65键盘的一些常用的快捷键，做个备忘:</p>
<p><code>Fn+Q、W、E</code> 对应蓝牙设备1、2、3,</p>
<p><code>Fn+R</code> 连接2.4G设备</p>
<p><code>Fn+X+C</code> 关闭自动休眠模式</p>
<p><code>Fn+X+V</code> 开启自动休眠模式</p>
<p><code>Fn+L</code> 查看电池点亮， 绿 &gt; 80%,  蓝 &gt; 20%, 红 &lt; 20%</p>
<p><code>~</code> Fn+Shift+Esc</p>
<p><code>Fn+H&lt;&gt;</code> 调整腰线的灯光亮度</p>
<p><code>Fn+H+→</code> 切换灯光颜色</p>
<p><code>Fn+H+←</code> 切换腰线灯光模式</p>
<p><code>Fn+←</code>切换键帽灯光模式</p>
<h3 id="完全关闭键盘灯光效果"><a href="#完全关闭键盘灯光效果" class="headerlink" title="完全关闭键盘灯光效果"></a>完全关闭键盘灯光效果</h3><p><code>Fn+&lt;-</code> 与 <code>Fn+H+&lt;-</code> 调节可以完全关闭键盘等与侧面腰线灯光，这样能节约不少的电量，通过这几天的使用发现即使关闭键帽灯光不关闭侧面的腰线灯光，键盘的电量还是坚持不了一周，还是续航比较重要。</p>
<h3 id="最后附上官方客服发来的说明书"><a href="#最后附上官方客服发来的说明书" class="headerlink" title="最后附上官方客服发来的说明书"></a>最后附上官方客服发来的说明书</h3><p><img src="/uploads/Halo65-intro.png" alt="Halo 65 说明书"></p>
]]></content>
  </entry>
</search>
